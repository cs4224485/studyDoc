1 django请求生命周期
	-> 执行遵循wsgi协议的模块(socket服务端) 在python中是一个wsgiref模块 用来进行请求报文解析，然后将请求交给web框架(django, flask)
	-> 中间件(路由匹配)		在数据到达视图之前进行额外的数据加工
	-> 视图函数(业务处理)	如果需要连接数据库会去连接数据库，如果需要模板会去渲染模板
	-> 返回中间件			对响应数据进行处理
	—> wsgi返回数据			将响应的内容发送给浏览器
	
2 什么是wsgi
	web服务网关接口
	实现该协议的模块：wsgiref(python自带), uwsgi(性能更强 支持多线程)
	用来接收、封装客户端发送的请求
	
不想让浏览器做校验的话  在form标签宏添加novalidate

3 视图
	- FBV 
	- CBV 通过as_view() 返回一个view函数， 执行view函数会执行dispatch函数 

4 restful规范
	(1) 根据method不同进行不同操作 GET/POST/PUT/DELETE/PATCH
	(2) 面向资源编程
	(3) url中体现版本
	(4) url中体现API
	(5) 建议使用https
	(6) 响应时设置状态码
	(7) 增加条件
	(8) 返回值
		GET: 返回所有列表[
				{'id':1, 'title':'cs'}
			]
		POST: 返回新增的数据
	(9) 返回错误信息
		{
			code：1001
			error："xx错误"
		}
		
5 django rest framework框架
	- 权限
	- 认证
	- 访问频率限制
	- 序列化
	- 路由
	- 视图
		class view(object):
		class APIView(View):
		class GenericAPIView(views.APIView):
		class GenericViewSet(ViewSetMixin, generics.GenericAPIView)
		class ModelViewSet(mixins.CreateModelMixin，
						   mixins.RetrieveModelMxin,
						   mixins.UpdateModelMxin,
						   minxs.DestroyModelMixin,
						   mixins.ListModelMixin,
						   GenericViewSet)
	- 分页
	- 解析器
	- 渲染器
	- 版本
	
6 跨域
	jsonp：
		同源策略会组织ajax请求; 不阻止具有src属性的标签
		可以通过动态创建script标签进行跨域情趣
	cros：
		设置响应头

7 HTTP协议
	- 基于TCP协议
	- 无状态，短链接
	- 请求和响应
		发送： 请求头 \r\n\r\n 请求体
		响应： 响应头 \r\n\r\n 响应体

		
8 如何实现访问频率控制
	匿名用户： 无法控制， 因为用户可以换代理IP
	登录用户： 通过用户名 {
		alex：[1521223123.232, 1521223122.322, 1521223121.232],
		eric：[1521223123.232,  1521223122.322, 1521223121.232
	} 

9 常见请求头
	- Contend-Type
	- User-Agent
	- Refer
	- Host
	- cookies
	
10 中间件
	- 5个方法
	- 应用场景：
		- 登录认证
		- 权限, 当用户登录时获取当前用户权限并放入session中。然后再次访 问其他页面，获取当前url并在session中进行匹配。如果没有匹配成功，则在中间件返回
		- 跨域 应用场景：在本地开始前后端分离的时候

11 django restframework
	通过各种组件可以帮我们快速组件基于restful规范的接口
		- 路由
			- 可以通过as_view传参数， 根据请求方式不同执行响应的方法
			- 可以在url中设置一个结尾， 类似于：.jsonp：
		- 视图
			帮助开发者提供了一些类，并在类中提供了多个方法供我们使用
		
		- 版本，
			在路由url中设置version参数， 用户请求时传入参数。在request.version中获取版本， 根据版本不同做不同操作
		- 认证
			编写一个类并注册认证的类中， 在类的authenticate方法中编写认证逻辑
				-认证成功返回元祖(user, auth)
				- 失败抛出异常raise authticateFaild(...)
		- 权限与认证类似		
		- 频率限制
			- 写一个类并注册到频率类， 在类的allow_request/wait 方法编写认证逻辑
			allow_request
				- True
				- Fales 如果返回False，那么就要执行wait
		- 解析器
			- 根据ConetType请求头， 选择不同解析器对请求体中的数据进行解析
		- 分页
			- 对数据库中获取到的数据进行分页处理
			页码越大速度越慢， 为什么以及如何解决
				原因： 页码越大向后需要扫描的行数越多， 因为每次都是从0开始扫描
				解决：
					- 限制显示的页数
					- 记录当前页面数据ID最大值和最小值， 再次分页时， 根据ID进行筛选然后再分页
		- 序列化
			- 对queryset序列化以及请求数据格式校验
		- 渲染器
			- 根据URL中传入后缀，决定在数据如何渲染到页面上
			
12 你如何理解restful规范
	restfu是一个规范， 规定API如何编写，用过他可以让我们api更加简洁可维护
	如 最直观的
		 根据method不同进行不同操作 GET/POST/PUT/DELETE/PATCH
		 原来都是要在url中设置
	除此之外：
		(2) 面向资源编程
		(3) url中体现版本
		(4) url中体现API
		(5) 建议使用https
		(6) 响应时设置状态码
		(7) 增加条件
		(8) 返回值
			GET: 返回所有列表[
					{'id':1, 'title':'cs'}
				]
			POST: 返回新增的数据
		(9) 返回错误信息
			{
				code：1001
				error："xx错误"
			}
			
13 通过字符串引入一个模块下的类并进行实例化
	path = "auth.csrf.CORS"
	import imporlib
	module_path, class_name = path.resplit('.', maxsplit=1)
	
	# 根据字符串的形式导入模块
	m = imporlib.import_mofule(module_path)
	# 获取类
	cls = getattr(m, class_name)
	
14 在当前模块通过反射实例化一个类
	class = getattr(sys.moules[__name__], str)
	obj = class()

15 如果代码出现bug， 你们是如何解决的
	创建一个bug分支， 然后进行bug处理，处理完毕后合并到master分支
	
16 redis是什么
	用于操作内存的软件
	- 可以做持久化：
		- AOF
		- RDB
	- 相当于是大字典
    - redis是一个单进程单线程	
	
17 Python解释器种类以及特定
	Cpython（最常用的版本）
      Python的官方版本，使用C语言实现，使用最为广泛，CPython实现会将源文件（py文件）转换成字节码文件（pyc文件），然后运行在Python虚拟机上。
	Jyhton
       Python的Java实现，Jython会将Python代码动态编译成Java字节码，然后在JVM上运行。
	IronPython
      Python的C#实现，IronPython将Python代码编译成C#字节码，然后在CLR上运行。（与Jython类似）
	PyPy（特殊）
      Python实现的Python，将Python的字节码字节码再编译成机器码。
	RubyPython、Brython ...
	
18 请编写一个函数实现将IP地址转换成一个整数
	def int_addr(address):
		packedIP = socket.inet_aton(address)
		return  struct.unpack('!L', packedIP)[0]

	print(int_addr('10.2.10.2'))
	
19 python递归的最大层数	
   测试是998层会报错
   
20 ascii、unicode、utf-8、gbk 区别？
	ASCLL编码：ASCLL又称为美国(国家)信息交换标准(代)码，一种使用7个或8个二进制位进行编码的方案，最多可以给256个字符ASCII(包括字母、数字、标点符号、控制字符及其他符号)分配(或指定)数值。
	gb2312：由于ASCLL最多只有8位主要用来标识英文字母的因此无法支持中文字符，为了能够让计算机支持汉语中国国家标准总局1980年发布gb2312，基本集共收入汉字6763个和非汉字图形字符682个。
	GBK：GBK仅仅只是将原来gb2312支持的汉字提升至了2万字，后续有出现了GB18030可支持2万7个汉字
	Unicode：Unicode又被称为万国码，为了解决不同国家的文字，Unicode为每种语言中的每个字符设定了统一并且唯一的二进制编码。一个字符占4byte。
	UTF-8：UTF-8仅仅这是Unicode的一个扩展集，由于Unicode每个字符都要占4bytes，因此UTF-8中规定如果字符是英文还是按照ASCLL码一个字符1byte，如果字符是中文则占3bytes
	
21 字节码和机器码的区别？
	机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据。
	字节码（Bytecode）是一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。
	
22 列举python3和Python2的区别
	python2两种数据类型：Unicode 和 str
	print函数:（Python3中print为一个函数，必须用括号括起来；Python2中print为class）
	通过input()解析用户的输入：（Python3中input得到的为str；Python2的input的到的为int型，Python2的raw_input得到的为str类型）
	在 Python 3 中，range()相当于xrange()。xrange() 函数用法与 range 完全相同，所不同的是生成的不是一个数组，而是一个生成器。
	

23 用一行代码实现数值交换： a = 1  b = 2
	a,b =b,a
	
24 列举布尔值为False的常见值？
	‘’ False 0 [] () {}
	
25 lambda表达式格式以及应用场景？
	lambda是匿名函数，lambda x : x + 2
	lambda *args : sum(args)
	lambda **kwargs : 1
	使用场景：函数式编程（map, reduce filter sorted），闭包

26 pass的作用？
	1、空语句
	2、保证格式完整性
	3、语义完整

27 *arg和**kwarg作用
	*arg会把多出来的位置参数转化为tuple
	**kwarg会把关键字参数转化为dic

28 is和==的区别
	is是根据id地址判断
	==根据数值判断
	
29 简述Python的深浅拷贝以及应用场景？
	当需要copy一个列表里边还嵌套着列表的一个数据结构时, 浅拷贝只拷贝最外层的列表，也就是如果修改了里层的值那么之前的列表里层的值也会同时被修改
	浅拷贝：拷贝最外层容器
	深拷贝：拷贝最外层容器，还拷贝容器中的元素。
	对于不可变元素，使用浅拷贝。

30 Python垃圾回收机制
	1、回收计数引用为0的对象，释放其占用的空间。
	2、循环垃圾回收器，释放循环引用对象。	
	
31 Python的可变类型和不可变类型？
	不可变类型（数字、字符串、元组、不可变集合）
	可变类型（列表、字典、可变集合）
32 求结果：
   v = dict.fromkeys(['k1','k2'],[])
   v[‘k1’].append(666)
   print(v)
   v[‘k1’] = 777
   print(v)
  
 结果：
	{'k1':777, 'k2':[666]}

33 一行代码实现9*9乘法表
	print('\n'.join([' '.join([f'{y} * {x} = {x * y}' for y in range(1, x+1)]) for x in range(1,10)]))

34 如何在github上给别人代码添加功能
	fork
	pull request
	
35 如果redis的k4对应的字典中有1000w条数据，请打印所有的数据
	ret = conn.hscan_iter('k4', count=100) # 每次取到100个
	for item in ret：
		print(item)
		
36 至少列举8个常用模块都有那些
	re  		正则表达式模块
	jason  		序列化模块
	os			与操作系统相关模块
	time		时间模块
	loggin		日志模块
	random		随机字符模块
	subprocess	执行操作系统shell命令模块
	datetime	

38 re的match和search区别？
	1 match从首字母开始开始匹配，string如果包含pattern子串，则匹配成功，返回Match对象，失败则返回None，若要完全匹配，pattern要以$结尾。
	2 search 匹配整个字符串，直到找到一个匹配

39 什么是正则中的贪婪匹配
	正则表达式一般趋向于最大长度匹配，也就是所谓的贪婪匹配

40 简述 生成器、迭代器、可迭代对象 以及应用场景
	生成器：如果一个列表容量过大那么它会占用大量的内存，而我们往往只是访问列表的几个元素这会导致大量内存被浪费。使用生成器可以每次调用next()就计算出下一个元素的值， 这样可以省内存空间
	迭代器：如列表 元祖，字典等数据类型都是一个可迭代对象， 他们可以通过iter()方法变成迭代器， 迭代器内部就是通过调用next()方法来不断取值, 特点就是一个的往外拿数据，节省内存,惰性机制，数据只能向前

41 什么是面向对象的mro
	是面向对象中多继承查找方式
	
42	os和sys模块的作用？
	os模块负责程序与操作系统的交互，提供了访问操作系统底层的接口;
	sys模块负责程序与python解释器的交互，提供了一系列的函数和变量，用于操控python的运行时环境。
	
43 什么是闭包
	当一层函数中再嵌套一层函数时，里层的函数可以直接调用外层的变量
	
44 什么是粘包，如何解决
   粘包是由于TCP的优化方法(Nagle算法)将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样，接收端，就难于分辨出来了，必须提供科学的拆包机制
   问题的根源在于，接收端不知道发送端将要传送的字节流的长度，所以解决粘包的方法就是围绕，如何让发送端在发送数据前，把自己将要发送的字节流总大小让接收端知晓，然后接收端来一个死循环接收完所有数据

45 如何用一行代码生成[1,4,9,16,25,36,49,64,81,100]
	c = [i ** 2 for i in range(11)]
	
46 MySQL常见数据库引擎及比较
	InnoDB 存储引擎     支持事务,其设计目标主要面向联机事务处理(OLTP)的应用 默认引擎,支持表锁和行锁
		加锁示例：
				begin；
				select xx from xx for update；
				commit;
			-pymysql
				cursor.execute('select * from xx for update')
			-django
				with trancation.automic():
					models.User.objects.all().for_update()
	MyISAM 存储引擎 	不支持事务、表锁设计、支持全文索引,主要面向一些 OLAP 数 据库应用,在 MySQL 5.5.8 版本之前是默认的存储引擎(除 Windows 版本外)
	Memory 存储引擎		正如其名,Memory 存储引擎中的数据都存放在内存中,数据库重 启或发生崩溃,表中的数据都将消失。
	BLACKHOLE			黑洞存储引擎，可以应用于主备复制中的分发主库。

47 数据库导入导出命令
	导入
		1、导出数据和表结构：
		mysqldump -u用户名 -p密码 数据库名 > 数据库名.sql
		mysqldump -uroot -p dbname > dbname .sql
		敲回车后会提示输入密码
		2、只导出表结构
		mysqldump -u用户名 -p密码 -d 数据库名 > 数据库名.sql
		mysqldump -uroot -p -d dbname > dbname .sql
	
	导出
		1、首先建空数据库
		mysql>create database dbname ;
		2、导入数据库
		方法一：
		（1）选择数据库
		mysql>use dbname ;
		（2）设置数据库编码
		mysql>set names utf8;
		（3）导入数据（注意sql文件的路径）
		mysql>source /home/xxxx/dbname .sql;
		方法二：
		mysql -u用户名 -p密码 数据库名 < 数据库名.sql
		
48 什么是覆盖索引

通常开发人员会根据查询的where条件来创建合适的索引，但是优秀的索引设计应该考虑到整个查询。其实mysql可以使用索引来直接获取列的数据。如果索引的叶子节点包含了要查询的数据，那么就不用回表查询了，也就是说这种索引包含（亦称覆盖）所有需要查询的字段的值，我们称这种索引为覆盖索引。
就是select的数据列只用从索引表中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。

49 给你一个路径"settings.Foo", 可以找到类并获取其中的大写静态字段。

	# 通常用户配置文件

	import imporlib

	path = "settings.Foo"
	path,clas = path.rsplit('.', maxsplit=1)
	m = imporlib.import_mofule(path)
	cls = getattr(m,clas)

	for key in dir(cls):
		if key.isupper():
			print(key,getattr(cls,key))

50 threading.local
	作用：为每个线程创建一个独立的空间，使得线程对自己的空间中的数据进行操作(数据隔离)
 
51 写一个栈
	class Stack(object):
		def __init__(self):
			self.data = []
		
		def push(self,val):
			return self.data.append(val)
		
		def pop(self):
			return self.data.pop()
			
	_stack = Stack()
	
	_stack.push('harry')
	_stack.push('sam')
	# 栈的版本二
	class Stack(object):

		def __init__(self, size):
			self.top = 0 # 栈指针
			self.size = size # 栈的大小
			self.data = []

		def push(self, el):
			if self.top == self.size:
				print("stack full")
				return
			self.data.insert(self.top, el)
			self.top += 1

		def pop(self):
			if self.top == 0:
				print("stack empty")
				return
			self.top -= 1
			return self.data.pop()

	
	
52 flask请求上下文管理：request， session 流程
	1 当前请求到来之后egsi会触发app的__call__方法， 由__call__方法再次调用wsgi_app方法
	2 在wsgi_app方法中：
		- 首先将请求相关+空session封装到一个RequestContext对象中 即 ctx
		- 将ctx交给LocalStack对象，再由LocakStack将ctx添加到Local中，local结构：
			__storage__={
				1231:{stack:[ctx,]}
			}
		- 根据请求中的cookie中提取名称为sessionid对应的值，对cookie进行解密+反序列化，再次赋值给ctx中的session
		- 视图函数
		- 把session中的数据再次写入到cookie中
		- 将ctx删除
		- 结果返回给用户浏览器
		- 断开socket连接
		


53 什么是偏函数
	可以帮助我们自动传递参数，在Flask中的LocalStack中有应用
		
54 什么是类，什么是方法	
	class Foo:
		
		def pop(self):
			pass
			
		def push(self):
			pass
			
	Foo.pop      # 函数
	obj = Foo()
	obj.pop		 # 方法
	
55 数据库连接池 DButils
	模式一：为每个线程创建一个连接，线程即使调用了close方法，也不会关闭，只是把连接重新放到连接池，供自己线程再次使用。当线程终止时，连接自动关闭。
	模式二：创建一批连接到连接池，供所有线程共享使用。
		
		import time
		import pymysql
		import threading
		from DBUtils.PooledDB import PooledDB, SharedDBConnection
		POOL = PooledDB(
			creator=pymysql,  # 使用链接数据库的模块
			maxconnections=6,  # 连接池允许的最大连接数，0和None表示不限制连接数
			mincached=2,  # 初始化时，链接池中至少创建的空闲的链接，0表示不创建
			maxcached=5,  # 链接池中最多闲置的链接，0和None不限制
			maxshared=3,  # 链接池中最多共享的链接数量，0和None表示全部共享。PS: 无用，因为pymysql和MySQLdb等模块的 threadsafety都为1，所有值无论设置为多少，_maxcached永远为0，所以永远是所有链接都共享。
			blocking=True,  # 连接池中如果没有可用连接后，是否阻塞等待。True，等待；False，不等待然后报错
			maxusage=None,  # 一个链接最多被重复使用的次数，None表示无限制
			setsession=[],  # 开始会话前执行的命令列表。如：["set datestyle to ...", "set time zone ..."]
			ping=0,
			# ping MySQL服务端，检查是否服务可用。# 如：0 = None = never, 1 = default = whenever it is requested, 2 = when a cursor is created, 4 = when a query is executed, 7 = always
			host='127.0.0.1',
			port=3306,
			user='root',
			password='123',
			database='pooldb',
			charset='utf8'
		)


			def func():
				# 检测当前正在运行连接数的是否小于最大链接数，如果不小于则：等待或报raise TooManyConnections异常
				# 否则
				# 则优先去初始化时创建的链接中获取链接 SteadyDBConnection。
				# 然后将SteadyDBConnection对象封装到PooledDedicatedDBConnection中并返回。
				# 如果最开始创建的链接没有链接，则去创建一个SteadyDBConnection对象，再封装到PooledDedicatedDBConnection中并返回。
				# 一旦关闭链接后，连接就返回到连接池让后续线程继续使用。
				conn = POOL.connection()

				# print(th, '链接被拿走了', conn1._con)
				# print(th, '池子里目前有', pool._idle_cache, '\r\n')

				cursor = conn.cursor()
				cursor.execute('select * from tb1')
				result = cursor.fetchall()
				conn.close()


			func()

56 Flask中g的生命周期？g和session一样吗

57 为什么要把 ctx=reques/session   app_ctx = app/g  分开成两个上下文
	因为离线脚本需要app_ctx. 不会用到ctx
	
58 索引
	索引的作用：加速查找+约束
	索引种类：
			- 主键索引: 唯一，不能重复，非空，加速查找
			- 唯一索引：加速查找，不重复， 可以为空
			- 普通索引：只能加速查找
			- 联合索引：加速查找
			- 联合唯一索引：加速查找，联合唯一		
			ps：联合索引遵循最左前缀原则
	名词：
			- 覆盖索引：在索引文件中就可以把想要的数据得到
			- 索引合并：使用多个单列索引去查找数据
			
59、IO多路复用/异步非阻塞

		 IO多路复用：通过一种机制，可以监听多个描述符 select/poll/epoll
		 select：连接数受限，查找配对速度慢，数据由内核拷贝到用户态
		 poll：改善了连接数，但是还是查找配对速度慢，数据由内核拷贝到用户态
		 epoll：epoll是linux下多路复用IO接口，是select/poll的增强版，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率
		 异步非阻塞：异步体现在回调上，回调就是有消息返回时告知一声儿进程进行处理。非阻塞就是不等待，不需要进程等待下去，
							  继续执行其他操作，不管其他进程的状态。
60 metaClass的作用
	metaClass的作用是指定当前类由谁来创建
	1 创建类时先执行type init方法
	2 当一个类实例化时，执行type的call方法， call方法的返回值就是实例化的对象
	
61 dir的作用 
	可以显示一个类下的所有成员 
	
62 谈谈你对面向面向对象的认识
	- 基础：谈面向对象就要从他的三大特性开始 如封装 继承 多态
		封装：
			- 方法封装到类中
			- 数据封装到对象中
			应用：
				- session/requset 封装到了RequestConteext对象中
				- app/g 封装到了AppContext中
		继承：如果多个类与相同的方法，为了避免重复编写，可以将其放在父类(基类)中间件
		多态(鸭子模型)：天生支持多态，对于参数来说可以传入任何类型的对象，只要保证有想要的方法即可
	
	- 进阶
		__init__		初始化
		__new__			创建对象
		__call__		对象()
		__iter__		返回一个可迭代对象
		__getattr__		对象.xx
		__setattr__		对象.xx = xx
		__getitem__		对象['XX']
		__setitem__		对象['XX'] = XX
		__mro__			查找成员顺序
		__dict__        查看类或对象中的所有成员
		__enter__       上下文管理，出现with
		__exit__		上下文管理
		
		
	- 高级
		metcalass
			1 类的创建
				class Foo
				type('Foo',(object),{})
			2 如何指定类由自定义的type创建
				class MyTye(type):
					pass
				class Foo(object, metcalss=MyTye):pass
				
			3 默认执行顺序

				class Foo(object):
					pass
				
				obj = Foo()
				如果一个类自己活基类中指定了metclass，那么该类就是由metaclass指定的type或mytype创建
				
	
63 什么是MySql的视图
	
	视图是一个虚拟表(非真实存在), 其本质是根据SQL语句获取动态的数据集并为其命名,用户使永时只需使用【名称】即可获取结果集，并可以将其当作表来使用		

	
64 Flask的上下文管理是如何实现的？
	请求进来之后，将request和session相关的东西会封装一个Requestcontext的对象中，再将App和g封装到AppContext中，再将这两个对象交给相应的LocalStack中，在由LocalStack把数据放到Local中。
	在使用中只需要导入request和session, 通过对象.方法 去取数据

65 Local的作用
	为每个线程或协程维护一个独立的空间
66 为什么导入request,就可以使用？
	每次执行request.xx方法时， 会触发LocalProxy对象的__getattr__等方法，由方法每次动态使用LocalStack去Locak中获取数据
	
67 索引的实现原理
	- B+ tree		harr=28
			50
		 40   	    	80
	  20    30      100	    120
	5  15  25 28(harry)    
	- hash

68 数据库的优化方案
	- 避免使用select *
	- char/varchar
	- 固定长度往前放
	- 内存代替表
	- 读写分离
	- 分库
	- 分表
		- 水平分表
		- 垂直分表
	- 命中索引
	- 组合索引代替索引合并
	- 尽量使用短索引
	- 如果取一条数据时，使用limit 1  
	
69 关于静态字段的一个练习题, 打印结果是什么以及为什么
	class RoleConfig(object)
		def f1(self, arg):
			print('f1', arg)
			
		def f2(self, arg):
			print('f2', arg)
			
		def f3(self, arg):
			print('f3', arg)
			
		list_display = [f1, f2]
		
		def get_list_dfisplay(self):
			self.list_display.insert(0, RoleConfig.f3)
			return self.list_display
		
	obj1 = RoleConfig()
	for item in obj1.get_list_display()
		print item(obj1,2)
		
	obj2 = RoleConfig()
	for item in obj2.get_list_dispaly():
		print(obj2,6)
		
		
	打印结果：
		f1 2
		f2 2
		f3 2
		f1 6
		f2 6
		f3 6
		f3 6
		
	因为list_display是一个静态字段 由于obj1实例化后执行了obj1.get_list_display()已经将f3插入到了list_display。
	obj2 拿到的list_display已经有了三个值	list_display = [f1, f2, f3] 所以f3执行了两次 总共输出7个结果

69 生成器的一个使用示例
	
	def get_result(data_list):
		for row in data_list:
			temp = "%s%s" %(row.name, row.pwd)
			yield temp
			
	def func(request)
		data_list = models.Users.objects.all()
		result = get_result(data_list)
		
		return render(request, 'xxx.html', {'result':result})
		
	xxx.html
		循环时会不断执行get_result生成器 这样可以节省内存
		{% for row in result %}
			{{row}
		{% endfor %}

70 __iter__方法
	
	class Row(object):
		def __init__(self, data):
			self.data = data
		
		def __iter__(self):
			'''
			iter方法需要返回一个可迭代对象或者是生成器
			'''
			yield "<div>"
			yield "全部"
			for item in self.data:
				yield "<a href='/index/?p1=1.0'>%s</a>" %item
			yield "</div>"
			
	data_list =[
		Row(['1.0以下',  '1.1-1.6'])
		Row(['汽笛', '柴油', '混合动力', '电动'])
		]
		
	for row in data_list:
		for field in row:
			print(field)

71 如何实现 “1,2,3” 变成 [‘1’,’2’,’3’] ?
	a = '1,2,3'
	a.split(',') 

72 如何实现[‘1’,’2’,’3’]变成[1,2,3] 
	b = [ int(item) for item in a] 	

73 def func(a,b=[]) 这种写法有什么坑?
	函数的第二个默认参数是一个list，当第一次执行的时候实例化了一个list，第二次执行还是用第一次执行的时候实例化的地址存储，所以三次执行的结果就是 [1, 1, 1] ，想每次执行只输出[1] ，默认参数应该设置为None。

74 面向对象中super的作用？
	super() 函数是用于调用父类(超类)的一个方法。
　　super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。
　　MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。

75  1、2、3、4、5 能组成多少个互不相同且无重复的三位数

	tar = [1, 2, 3, 4]
	count = 0  # 结果计数
	for i in range(len(tar)):
		x = str(tar.pop(i))  # 取出百位数字
		for j in range(len(tar)):
			y = str(tar.pop(j))  # 取出十位数字
			for k in range(len(tar)):
				print(x + y + str(tar[k]), end='  ')  #将百位十位和个位拼接，得到一个结果
				count += 1  #结果计数+1
			tar.insert(j, int(y))  # 将拿出的十位数字放回原始列表，防止影响下次循环
		tar.insert(i, int(x))  # 将拿出的百位数字放回原始列表，防止影响下次循环
		print('')  # 百位相同的结果显示为一行，百位数字改变的时候换行
	print('最终结果为：%s个' % count)

76 什么是反射：
	通过字符串的形式操作对象相关的属性。python中的一切事物都是对象（都可以使用反射）
	
77 json序列化时，可以处理的数据类型有哪些？如何定制支持datetime类型？
	可以处理python中的 list dic str 
	
	自定义时间序列化转换器
	import json
	from json import JSONEncoder
	from datetime import datetime
	class CJsonEncoder(JSONEncoder):

		def default(self, obj):
			if isinstance(obj, datetime):
				return obj.strftime('%Y-%m-%d %H:%M:%S')
			elif isinstance(obj, date):
				return obj.strftime('%Y-%m-%d')
			else:
				return json.JSONEncoder.default(self, obj)
	# {"name": "alex", "data": "2018-05-18 19:52:05"}

78 json序列化时，默认遇到中文会转换成unicode，如果想要保留中文怎么办？
	import json
	a=json.dumps({"ddf":"你好"},ensure_ascii=False)
	print(a) #{"ddf": "你好"}
	
79 什么是断言？应用场景？
	Python的assert是用来检查一个条件，如果它为真，就不做任何事。如果它为假，则会抛出AssertError并且包含错误信息。例如：
	x = 23
	assert x > 0, "x is not zero or negative"
	assert x%2 == 0, "x is not an even number"

80 python中的with语句是用来干嘛的？有什么作用？
	with语句的作用是通过某种方式简化异常处理，它是所谓的上下文管理器的一种
	用法举例如下：
		with open('output.txt', 'w') as f:
			f.write('Hi there!')
	当你要成对执行两个相关的操作的时候，这样就很方便，以上便是经典例子，with语句会在嵌套的代码执行之后，自动关闭文件。这种做法的还有另一个优势就是，无论嵌套的代码是以何种方式结束的，它都关闭文件。如果在嵌套的代码中发生异常，它能够在外部exception handler catch异常前关闭文件。如果嵌套代码有return/continue/break语句，它同样能够关闭文件。

81 使用代码实现查看列举目录下的所有文件
	#方法1：使用os.listdir
	import os
	for filename in os.listdir(r'c:\windows'):
		print filename
		
	#方法2：通过os.path.walk递归遍历，可以访问子文件夹
	import os.path
	def processDirectory ( args, dirname, filenames ):
		print 'Directory',dirname
		for filename in filenames:
			print ' File',filename
			
	os.path.walk(r'c:\windows', processDirectory, None )
	
	#方法3：非递归
	import os
	for dirpath, dirnames, filenames in os.walk('c:\\winnt'):
		print 'Directory', dirpath
		for filename in filenames:
			print ' File', filename
			
	#方法4：使用glob模块，可以设置文件过滤
	import glob
	for filename in glob.glob(r'c:\windows\*.exe'):
		print filename
82 简述 yield和yield from关键字
	yild可以返回一个生成器对象， 生成器每次在内存中只存储一个值可以节省内存空间
	yield from呢？简单地说，yield from  generator 。实际上就是返回另外一个生成器。如下所示：
	def generator1():
		item = range(10)
		for i in item:
			yield i
 
	def generator2():
		yield 'a'
		yield 'b'
		yield 'c'
		yield from generator1() #yield from iterable本质上等于 for item in iterable: yield item的缩写版
		yield from [11,22,33,44]
		yield from (12,23,34)
		yield from range(3)
	 
	for i in generator2() :
		print(i)
		
	从上面的代码可以看出，yield from 后面可以跟的式子有“ 生成器  元组 列表等可迭代对象以及range（）函数产生的序列
	
手写一个单例模式
		import threading
		class Singleton(object):
			__instance = None
			lock = threading.RLock()

			def __new__(cls, *args, **kwargs):
				# 添加效率，如果后面的线程需要调用直接从这里判断，不用走下面的代码
				if cls.__instance:
					return cls.__instance

				# 实现线程安全
				with cls.lock:
					if not cls.__instance:
						cls.__instance = super(cls).__new__
					return cls.__instance


		def task(arg):
			obj = Singleton()
			print(obj)


		for i in range(10):
			t = threading.Thread(target=task, args=(i,))
			t.start()

面向对象上下文：
	class Foo(object):

		def __enter__(self):
			print("进入")
			return 666

		def __exit__(self, exc_type, exc_val, exc_tb):
			print("退出")


	obj = Foo()

	with obj as x1:
		print(x1)
		print("操作中")

MateClass执行流程
	class MyType(type):

		def __init__(self, name, base, dic):
			print("2 type init")
			super().__init__(name, base, dic)

		def __new__(cls, name, base, dic):
			print("1 type.new")
			return super().__new__(cls, name, base, dic)

		def __call__(self, *args, **kwargs):
			print("3 type.call")
			obj = self.__new__(self, *args, **kwargs)
			obj.__init__(*args, **kwargs)



	class Foo(object, metaclass=MyType):
		def __init__(self):
			print("3.2 foo.init")

		def __new__(cls, *args, **kwargs):
			print("3.1 foo.new")
			return super().__new__(cls)

	obj = Foo()
	
	打印结果：	
		1 type.new
		2 type init
		3 type.call
		3.1 foo.new
		3.2 foo.init

构建下列结构成为父子嵌套的数据结构
	
	info = [
		{"id": 1, "name": "harry", "pid": None},
		{"id": 2, "name": "sam", "pid": None},
		{"id": 3, "name": "jerry", "pid": 1},
		{"id": 4, "name": "beal", "pid": 3},
		{"id": 5, "name": "lucy", "pid": 2},
		{"id": 6, "name": "jack", "pid": 4}
	]
	result = []
	info_dict = {}
	for item in info:
		item['children'] = []
		info_dict[item['id']] = item

	for k, v in info_dict.items():
		pid = v.get('pid')
		if not pid:
			result.append(v)
		else:
			info_dict[pid]['children'].append(v)

	print(result)

函数的参数情况 	
	# 函数的参数
	def foo(a1, a2=[]):
		a2.append(a1)
		return a2

	r1 = foo(99)
	print(r1)

	r2 = foo(1, [11, 22])
	print(r2)

	r3 = foo(2)
	print(r3)
	结果：
		[99]
		[11, 22, 1]
		[99, 2]

写装饰器重复执行n次
	def count(times):
		def wrapper(func):
			def inner(*args, **kwargs):
				for i in range(0,times):
					ret = func(*args, **kwargs)
				return ret
			return inner
		return wrapper

	@count(5)
	def fun():
		print(1)
		return 123

	ret = fun()
	print(ret)
			
网络编程和并发（34题）
1  简述 OSI 七层协议。
	物理层：主要设备，中继器、集线器，传输单位是比特（比特流），保证比特数据远距离传输不会衰减，都能对数据进行再生和重定时。
	数据链路层：主要设备，网卡，网桥，交换机，传输单位是帧，以太网协议为基础进行传输。帧就是对字节的封装，字节（byte）是由位（bit）组成的。
	网络层：主要设备，路由器，传输单位是报文（包），以IP协议为基础进行传输，提供逻辑地址IP，选路，数据从源端到目的端的传输。
	传输层：主要设备，网管，传输单位是数据段（段），以TCP/UDP协议为主，实现网络不同主机上用户进程之间的数据通信，可靠与不可靠的传输，传输层的错误检验，流量控制等。
	会话层：传输单位是：数据，会话层管理主机之间的会话进程，即负责建立、管理、终止进程之间的会话。会话层还利用在数据中插入校验点来实现数据的同步。如服务器验证用户登录便是会话层完成额。
	表示层：传输单位是：数据，表示层对上层数据或信息进行变换以保证一个主机应用层信息可以被另一个主机的应用程序理解。表示层的数据转换包括数据的加密、压缩、格式转换等。
	应用层：传输单位是：数据，为操作系统或网络应用程序提供访问网络服务的接口。确定进程之间的性质以满足用户需求以及提供网络与用户的应用。
2 什么是C/S和B/S架构？
	C/S是客户端服务端的架构， C/S架构软件有一个特点，就是如果用户要使用的话，需要下载一个客户端，安装后就可以使用
	什么是B/S架构： B/S架构的全称为Browser/Server，即浏览器/服务器结构。Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现。
3 简述 三次握手、四次挥手的流程。
	在TCP/IP协议中,TCP协议提供可靠的连接服务,采用三次握手建立一个连接.
	三次握手流程：
		第一次握手：建立连接时,客户端发送syn包(syn=j)到服务器,并进入SYN_SEND状态,等待服务器确认； 
		SYN：同步序列编号(Synchronize Sequence Numbers)
		第二次握手：服务器收到syn包,必须确认客户的SYN（ack=j+1）,同时自己也发送一个SYN包（syn=k）,即SYN+ACK包,此时服务器进入SYN_RECV状态； 
		第三次握手：客户端收到服务器的SYN＋ACK包,向服务器发送确认包ACK(ack=k+1),此包发送完毕,客户端和服务器进入ESTABLISHED状态,完成三次握手.
	四次挥手的流程：
		（1）第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。
        （2）第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。
        （3）第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。
        （4）第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。
		
4 什么是arp协议？
	使用ARP协议可实现通过IP地址获得对应主机的物理地址（MAC地址）。

5 TCP和UDP的区别
	TCP（Transmission Control Protocol，传输控制协议）提供的是面向连接，可靠的字节流服务。即客户和服务器交换数据前，必须现在双方之间建立一个TCP连接，之后才能传输数据。并且提供超时重发，丢弃重复数据，检验数据，流量控制等功能，保证数据能从一端传到另一端。
	UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把应用程序传给IP层的数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。

6 为何基于tcp协议的通信比基于udp协议的通信更可靠
	因为TCP协议需要与服务器端建立三次握手，并且有重传机制
	
7 什么是socket？简述基于tcp协议的套接字通信流程

	为了实现服务器与客户机的通信,服务器和客户机都必须建立套接字。服务器与客户机的工作原理可以用下面的过程来描述。
	1.服务器先用 socket 函数来建立一个套接字,用这个套接字完成通信的监听。
	2.用 bind 函数来绑定一个端口号和 IP 地址。因为本地计算机可能有多个网址和 IP,每一个 IP 和端口有多个端口。需要指定一个 IP 和端口进行监听。
	3.服务器调用 listen 函数,使服务器的这个端口和 IP 处于监听状态,等待客户机的连接。
	4.客户机用 socket 函数建立一个套接字,设定远程 IP 和端口。
	5.客户机调用 connect 函数连接远程计算机指定的端口。
	6.服务器用 accept 函数来接受远程计算机的连接,建立起与客户机之间的通信。
	7.建立连接以后,客户机用 write 函数向 socket 中写入数据。也可以用 read 函数读取服务器发送来的数据。
	8.服务器用 read 函数读取客户机发送来的数据,也可以用 write 函数来发送数据。
	9.完成通信以后,用 close 函数关闭 socket 连接。

8 什么是粘包？ socket 中造成粘包的原因是什么？ 哪些情况会发生粘包现象
	粘包：多个数据包被连续存储于连续的缓存中，在对数据包进行读取时由于无法确定发生方的发送边界，而采用某一估测值大小来进行数据读出，若双方的size不一致时就会使指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。
	出现粘包的原因：发送方引起的粘包是由TCP协议本身造成的，TCP为提高传输效率，发送方往往要收集到足够多的数据后才发送一包数据。若连续几次发送的数据都很少，通常TCP会根据优化算法把这些数据合成一包后一次发送出去，这样接收方就收到了粘包数据。
					接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。
	
	粘包的处理方式：
		1. 使用带消息头的协议、消息头存储消息开始标识及消息长度信息，服务端获取消息头的时候解析出消息长度，然后向后读取该长度的内容。
		2. 设置定长消息，服务端每次读取既定长度的内容作为一条完整消息，当消息不够长时，空位补上固定字符。
		3. 设置消息边界，服务端从网络流中按消息编辑分离出消息内容，一般使用‘\n’。
		
9 IO多路复用的作用
	I/O多路复用是用于提升效率，单个进程可以同时监听多个网络连接IO。
	通过一种机制，可以监视多个文件描述符，一旦描述符就绪（读就绪和写就绪），能通知程序进行相应的读写操作，I/O多路复用避免阻塞在io上，原本为多进程或多线程来接收多个连接的消息变为单进程或单线程保存多个socket的状态后轮询处理select是通过系统调用来监视一组由多个文件描述符组成的数组，通过调用select()返回结果，数组中就绪的文件描述符会被内核标记出来，然后进程就可以获得这些文件描述符，然后进行相应的读写操作。每次调用select,都需要把fd集合由用户态拷贝到内核态，在fd多的时候开销会很大，每次select都是线性遍历整个列表，当fd很大的时候，遍历的开销也很大
	poll本质上与select基本相同，只不过监控的最大连接数上相较于select没有了限制，因为poll使用的数据结构是链表，而select使用的是数组，数组是要初始化长度大小的，且不能改变
	Epoll：解决select和poll本身的缺陷

10 什么是防火墙以及作用
	用于在隔离，屏蔽一些非法的数据
	
11 select、poll、epoll 模型的区别
	
	IO多路复用：通过一种机制，可以监听多个描述符 select/poll/epoll
	select：连接数受限，查找配对速度慢，数据由内核拷贝到用户态
	poll：改善了连接数，但是还是查找配对速度慢，数据由内核拷贝到用户态
	epoll：epoll是linux下多路复用IO接口，是select/poll的增强版，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率
	异步非阻塞：异步体现在回调上，回调就是有消息返回时告知一声儿进程进行处理。非阻塞就是不等待，不需要进程等待下去，
	
12 简述 进程、线程、协程的区别 以及应用场景
	进程是当一个静态的程序启动之后称之为一个进程。而负责执行是CPU。也就是说程序只一堆静态的代码，当程序被运行起来后才可以称之为是一个进程。
	而线程则是进程的一个执行单位，线程想比较进程则更轻量级
	Python 	GIL是指python全局解释器锁，是python解释器中的一个特性，GIL本身就是一把互斥锁，所有互斥锁本质都是一样的，同一时间内共享数据只能被一个任务所修改进而保证数据安全.
	协程的优点是可以在单线程下实现多并发，这样可以很大程度上节省系统资源，缺点则是，这种多并发只能用于IO操作密集的应用，如果是计算密集的应用则起不到很好的效果

13 Python中如何使用线程池和进程池
		使用concurrent.futures模块	ThreadPoolExecutor


数据库相关题目

1. 数据库如何去重
	可以通过group by关键字并通过count函数对分组的数据进行统计, 如果count的结果大于1 那么说明这条数据是重复的。 刚刚已经把重复的数据查询出来了,包括id, 那么查询出每个重复组中的唯一一个id,也就是x,就可以delete … id not in (x)
	DELETE FROM user
	WHERE id NOT IN (
		SELECT MIN(id) FROM user
			GROUP BY name,age 
	)
	但是报错了
	因为在mysql中,不能在一条Sql语句中,即查询这些数据,同时修改这些数据
	解决方法：select的结果再通过一个中间表temp进行select多一次，就可以避免这个错误
	DELETE FROM user
	WHERE id NOT IN (
		SELECT temp.min_id FROM (
			SELECT MIN(id) min_id FROM user
				GROUP BY name,age
			)AS temp
	);
2. 事务的特性
	事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。
	原子性
		事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 。
	一致性
		事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。比如，当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统在运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。
	隔离性
		一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。
	持续性
		指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。

3. 联合索引想要名字索引应遵循：最左前缀原则
	name,email,pwd => 联合索引
	
		可以命中的情况：
			select * from xx where name = 123
			select name,email
			select name,email,pwd
			select name,pwd
		不能命中的情况
			select email
			select email,pwd

4.数据库优化的方式
	读写分离, 整两台服务器，两台服务器保持数据一致，一台只负责读 一台只负责写
	分库分表
		-分库
		-分表
			-水平分表 
			-垂直分表  列特别多的时候使用OneToOne
			
	使用单表,虽然会造成数据冗余，但是可以提高查询速度
	热点数据使用缓存
	负载均衡
	创建并命中索引
	常见数据放内存， 例如choice(男，女)
	别写select *
	
前端相关题目
