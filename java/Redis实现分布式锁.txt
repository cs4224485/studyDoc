一、为什么要使用分布式锁
我们在开发应用的时候，如果需要对某一个共享变量进行多线程同步访问的时候，可以使用我们学到的Java多线程的18般武艺进行处理，并且可以完美的运行，毫无Bug！

注意这是单机应用，也就是所有的请求都会分配到当前服务器的JVM内部，然后映射为操作系统的线程进行处理！而这个共享变量只是在这个JVM内部的一块内存空间！
后来业务发展，需要做集群，一个应用需要部署到几台机器上然后做负载均衡。

上图可以看到，变量A存在JVM1、JVM2、JVM3三个JVM内存中（这个变量A主要体现是在一个类中的一个成员变量，是一个有状态的对象，例如：UserController控制器中的一个整形类型的成员变量），如果不加任何控制的话，变量A同时都会在JVM分配一块内存，三个请求发过来同时对这个变量操作，显然结果是不对的！即使不是同时发过来，三个请求分别操作三个不同JVM内存区域的数据，变量A之间不存在共享，也不具有可见性，处理的结果也是不对的！
如果我们业务中确实存在这个场景的话，我们就需要一种方法解决这个问题！
为了保证一个方法或属性在高并发情况下的同一时间只能被同一个线程执行，在传统单体应用单机部署的情况下，可以使用Java并发处理相关的API(如ReentrantLock或Synchronized)进行互斥控制。在单机环境中，Java中提供了很多并发处理相关的API。
但是，随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。
为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！

二、分布式锁应该具备哪些条件

在分析分布式锁的三种实现方式之前，先了解一下分布式锁应该具备哪些条件：
	1、在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； 
	2、高可用的获取锁与释放锁； 
	3、高性能的获取锁与释放锁； 
	4、具备可重入特性； 
	5、具备锁失效机制，防止死锁； 
	6、具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。
	

三、分布式锁的三种实现方式

目前几乎很多大型网站及应用都是分布式部署的，分布式场景中的数据一致性问题一直是一个比较重要的话题。
分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。
在很多场景中，我们为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。有的时候，我们需要保证一个方法在同一时间内只能被同一个线程执行。

四、 基于Redis的实现方式
	1、选用Redis实现分布式锁原因：
		（1）Redis有很高的性能； 
		（2）Redis命令对此支持较好，实现起来比较方便

	2、使用命令介绍：
		（1）SETNX
			SETNX key val：当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。
		（2）expire
			expire key timeout：为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。
		（3）delete
			delete key：删除key
			
	3、实现思想：
		（1）获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。
		（2）获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。
		（3）释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行delete进行锁释放。
		
	4、 分布式锁的简单实现代码：
		import java.util.List;
		import java.util.UUID;

		/**
		 * 分布式锁的简单实现代码
		 * Created by liuyang on 2017/4/20.
		 */
		public class DistributedLock {

			private final JedisPool jedisPool;

			public DistributedLock(JedisPool jedisPool) {
				this.jedisPool = jedisPool;
			}

			/**
			 * 加锁
			 *
			 * @param lockName       锁的key
			 * @param acquireTimeout 获取超时时间
			 * @param timeout        锁的超时时间
			 * @return 锁标识
			 */
			public String lockWithTimeout(String lockName, long acquireTimeout, long timeout) {
				Jedis conn = null;
				String retIdentifier = null;
				try {
					// 获取连接
					conn = jedisPool.getResource();
					// 随机生成一个value
					String identifier = UUID.randomUUID().toString();
					// 锁名，即key值
					String lockKey = "lock:" + lockName;
					// 超时时间，上锁后超过此时间则自动释放锁
					int lockExpire = (int) (timeout / 1000);

					// 获取锁的超时时间，超过这个时间则放弃获取锁
					long end = System.currentTimeMillis() + acquireTimeout;
					while (System.currentTimeMillis() < end) {
						if (conn.setnx(lockKey, identifier) == 1) {
							conn.expire(lockKey, lockExpire);
							// 返回value值，用于释放锁时间确认
							retIdentifier = identifier;
							return retIdentifier;
						}
						// 返回-1代表key没有设置超时时间，为key设置一个超时时间
						if (conn.ttl(lockKey) == -1) {
							conn.expire(lockKey, lockExpire);
						}

						try {
							Thread.sleep(10);
						} catch (InterruptedException e) {
							Thread.currentThread().interrupt();
						}
					}
				} catch (JedisException e) {
					e.printStackTrace();
				} finally {
					if (conn != null) {
						conn.close();
					}
				}
				return retIdentifier;
			}

			/**
			 * 释放锁
			 *
			 * @param lockName   锁的key
			 * @param identifier 释放锁的标识
			 * @return
			 */
			public boolean releaseLock(String lockName, String identifier) {
				Jedis conn = null;
				String lockKey = "lock:" + lockName;
				boolean retFlag = false;
				try {
					conn = jedisPool.getResource();
					while (true) {
						// 监视lock，准备开始事务
						conn.watch(lockKey);
						// 通过前面返回的value值判断是不是该锁，若是该锁，则删除，释放锁
						if (identifier.equals(conn.get(lockKey))) {
							Transaction transaction = conn.multi();
							transaction.del(lockKey);
							List<Object> results = transaction.exec();
							if (results == null) {
								continue;
							}
							retFlag = true;
						}
						conn.unwatch();
						break;
					}
				} catch (JedisException e) {
					e.printStackTrace();
				} finally {
					if (conn != null) {
						conn.close();
					}
				}
				return retFlag;
			}
		}
		
	5、测试刚才实现的分布式锁
		例子中使用50个线程模拟秒杀一个商品，使用–运算符来实现商品减少，从结果有序性就可以看出是否为加锁状态。
		模拟秒杀服务，在其中配置了jedis线程池，在初始化的时候传给分布式锁，供其使用。
		
		public class Service {
		 
			private static JedisPool pool = null;
		 
			private DistributedLock lock = new DistributedLock(pool);
		 
			int n = 500;
		 
			static {
				JedisPoolConfig config = new JedisPoolConfig();
				// 设置最大连接数
				config.setMaxTotal(200);
				// 设置最大空闲数
				config.setMaxIdle(8);
				// 设置最大等待时间
				config.setMaxWaitMillis(1000 * 100);
				// 在borrow一个jedis实例时，是否需要验证，若为true，则所有jedis实例均是可用的
				config.setTestOnBorrow(true);
				pool = new JedisPool(config, "127.0.0.1", 6379, 3000);
			}
		 
			public void seckill() {
				// 返回锁的value值，供释放锁时候进行判断
				String identifier = lock.lockWithTimeout("resource", 5000, 1000);
				System.out.println(Thread.currentThread().getName() + "获得了锁");
				System.out.println(--n);
				lock.releaseLock("resource", identifier);
			}
		}
		
	6、模拟线程进行秒杀服务：
		
		public class ThreadA extends Thread {
			private Service service;
		 
			public ThreadA(Service service) {
				this.service = service;
			}
		 
			@Override
			public void run() {
				service.seckill();
			}
		}
		 
		public class Test {
			public static void main(String[] args) {
				Service service = new Service();
				for (int i = 0; i < 50; i++) {
					ThreadA threadA = new ThreadA(service);
					threadA.start();
				}
			}
		}