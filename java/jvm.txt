一 JVM简介
	JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。

	Java语言的一个非常重要的特点就是与平台的无关性。
	而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。
	而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。

X JVM的声明周期
	1. 虚拟机的启动
		java虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的, 这个类是由虚拟机的具体实现指定的。
	
	2. 虚拟机的执行
		一个运行中的java虚拟机有着一个清晰的任务：执行java程序
		程序开始执行时他才运行，程序结束时他就停止
		执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做JAVA虚拟机的程序
		
	3. JAVA虚拟机退出
		如下几种情况虚拟机会退出
			* 程序正常执行结束
			* 程序在执行过程中遇到了异常或错误而异常终止
			* 由于操作系统出现错误而导致Java虚拟机进程终止
			* 某线程调用Runtime类或System类的exit方法,或Runtime类的halt方法, 并且Java安全管理器也允许这次exit或halt操作
			* 除此之外，JNI规范描述了JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况
		