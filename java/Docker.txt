一 Docker简介
	
	Docker是基于Go语言实现的云开源项目
	Docker的主要目标是"Build, Ship and Run Any App, Anywhere"， 也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP(可以是一个WEB应用或数据库应用等等)及其运行环境能够做到"一次封装，到处运行"
	
	Linux容器技术的出现解决了这样一个问题， 而Docker就是在它的基础上发展过来的。将应用运行在Docker容器上面，而Docker容器在任何操作系统上都是一致的，这家ius实现了跨平台、跨服务器。
	只需要一次配置好环境，换到别的机子上就可以一键部署好 
	
	Docker和传统虚拟化方式的不同之处：
		* 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上在运行所需应用的进程
		* 而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。 因此容器要比传统虚拟机更为轻便
		* 每个容器之间互相隔离，每个容器都有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。
		
	容器的组成
	
		1. 镜像
			Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。
			
		2. 容器
			Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例。
			它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。
			可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。
			容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一区别在于容器的最上面那一层是可读可写的。
			
		3. 仓库
			仓库（Repository）是集中存放镜像文件的场所。
			仓库(Repository)和仓库注册服务器（Registry）是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多个镜像，每个镜像有不同的标签（tag）。
			仓库分为公开仓库（Public）和私有仓库（Private）两种形式。
			最大的公开仓库是 Docker Hub(https://hub.docker.com/)，
			存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云 等

二 Docker的安装
	1 CentOS6.8 安装Docker
		yum install -y epel-release
		
		yum instal -y docker-io
		
		安装后的配置文件：/etc/sysconfig/docker
		
		启动Docker后台服务: service docker start
		
		docker version 验证
	
	2. Centos7 安装
		官网中文安装手册https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/#prerequisites
		
		(1) 安装GCC相关
			yum -y install gcc
			yum -y install gcc-c++
			
		(2) 如果有旧版本 卸载旧版本
			yum -y remove docker docker-common docker-selinux docker-engin
			
		(3) 安装需要的软件包
			yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
			
		(4) 更新yum软件包索引
			yum makecache fast
			
		(5) 安装DOCKER CE
			yum -y install docker-ce
			
		(6) 启动docker
			systemctl start docker
			
		(7) 测试
			docker version
			docker run hello-worl
			
		(8) 配置镜像加速
			mkdir -p /etc/docke
			vim  /etc/docker/daemon.json
				#网易云
				{"registry-mirrors": ["http://hub-mirror.c.163.com"] }
				 
				 
				 
				 #阿里云
				{
				  "registry-mirrors": ["https://｛自已的编码｝.mirror.aliyuncs.com"]
				}
		(9) 卸载
			systemctl stop docker
			yum -y remove docker-ce
			rm -rf /var/lib/docker
			
	3 Docker是怎么工作的
		Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 
		容器，是一个运行时环境，就是我们前面说到的集装箱。
		
	4 为什么Docker比较比VM块
		(1)docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。
		(2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。


三 Docker常用命令
	1. 帮助命令
		查看版本 	docker version
		查看信息 	docker info
		查看帮助	docker --help
		
	2. 镜像命令
		docker images 列出本地主机上镜像
			OPTIONS说明： -a: 列表本地所有的镜像(含中间影像层)
						  -q：只显示镜像ID
						  -digests: 显示镜像的摘要信息
						  -no-trunc: 显示完整的镜像信息
						  
		docker search 某个XXX镜像名字
			命令：docker search [OPTIONS] 镜像名字
			OPTIONS: --no-trunc:显示完整的镜像描述。
					 -s：列出收藏数不小于指定值的镜像。
					 -automated:只列出automated build类型的镜像
					 
		docker pull 某个XXX镜像名字
			下载镜像
			docker pull 镜像名字 [:TAG]
			
		docker rmi 某个XXX镜像名字ID 
			删除单个镜像：docker rmi -f 镜像ID
			删除多个镜像: docker rmi -f 镜像名1:TAG 镜像名2:TAG
			删除全部镜像: docker rmi -f $(docker images -qa)
			
	
	3 容器命令
		(1) 首先拉一个CentOS镜像
			docker pull centos
			
		(2) 新建并启动容器
			docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
			 OPTIONS说明（常用）：有些是一个减号，有些是两个减号
				--name="容器新名字": 为容器指定一个名称；
				-d: 后台运行容器，并返回容器ID，也即启动守护式容器；
				-i：以交互模式运行容器，通常与 -t 同时使用；
				-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；
				-P: 随机端口映射；
				-p: 指定端口映射，有以下四种格式
					  ip:hostPort:containerPort
					  ip::containerPort
					  hostPort:containerPort
					  containerPort
						
						
		(3) 列出当前所有正在运行的容器
			docker ps[OPTIONS] 
			OPTIONS说明（常用）：
				-a :列出当前所有正在运行的容器+历史上运行过的
				-l :显示最近创建的容器。
				-n：显示最近n个创建的容器。
				-q :静默模式，只显示容器编号。
				--no-trunc :不截断输出。
				
		(4) 退出容器
			两种退出方式：eixt 容器停止退出
						  ctrl+P+Q  容器停止退出
						  
		
		(5) 启动容器
			docker start 容器ID或者容器名
			
		(6) 重启容器
			docker restart 容器ID或者容器名
			
		(7) 停止容器
			docker stop 容器ID或者容器名
			
		(8) 强制停止容器
			docker kill 容器ID或者容器名
			
		(9) 删除已停止的容器
			docker rm 容器ID 
			一次性删除多个容器
				docker rm -f $(docker ps -a -q
				docker ps -a -q | xargs docker rm
			
	
	4 容器核心命令
		(1) 启动守护式容器
			docker run -d 容器名
			
			 
			#使用镜像centos:latest以后台模式启动一个容器
			docker run -d centos
			 
			问题：然后docker ps -a 进行查看, 会发现容器已经退出
			很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程.
			容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。
			 
			这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如
			service nginx start
			但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用,
			这样的容器后台启动后,会立即自杀因为他觉得他没事可做了.
			所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行
			shell执行一个循环 保证docker容器在运行
			[root@192 harry]# docker run -d centos /bin/sh -c "while true;do echo hello world;sleep 2;done"
			
		(2) 查看容器日志
			docker logs -f -t --tail 容器ID 
				-t 		是加入时间戳
				-f		跟随最新的日志打印
				-tail	数字 显示最后多少条
		
		(3) 查看容器运行的进程
			docker top 容器ID
		
		(4) 查看容器内部细节
			docker inspect 容器ID
			
		(5) 进入正在运行的容器并以命令行交互
			docker exec -it 容器ID bashShel  [root@localhost harry]# docker exec -it e25adfc72c7a ls /tmp
			重新进入docker attach 容器ID
			上面两者的区别：
				attach 直接进入容器启动命令的终端，不会启动新的进程
				exec 是在容器中打开新的终端，并且可以启动新的进程
				
		(6) 从容器内拷贝文件到主机上
			docker cp  容器ID:容器内路径 目的主机路径