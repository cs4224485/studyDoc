Dom文档加载步骤
	1. 解析HTML结构
	2. 加载外部脚本和样式表文件
	3. 解析并执行代码
	4. DOM树构建完成
	5. 加载图片等外部文件
	6. 页面加载完毕

window.onload与$(document).ready()

1 执行时间不同
	window.onload必须等到页面内包含图片的所有元素加载完毕后才能执行。
	$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕
2 编写个数不同
	window.onload不能同时编写多个， 如果有多个window.onload方法， 只会执行一个
	$(document).ready()可以同时编写多个并且都可以得到执行
3 简化写法不同
	window.onload没有简化写法
	$(document).ready(function(){}) 可以简写成$(function(){});

jquery的基础选择器
	// 使用jquery的时候 要有入口函数 回调函数
    $(document).ready(function () {
        // 1 id选择器
        console.log($('#brother'));
        $('#brother').css('color','red');
        // 2 标签选择器
        $('a').css('color','yellow');
        $('a').css({'color':'red','font-size':'24px'});  // 设置多个值

        // 3 类选择器
        $('.li3').css('background','green');

        // 4 *通配符选择器
        console.log($('*'));
    })

层级选择器
	   // 1. 后代选择器 div p
            $('#box p').css('color','red');

	   // 2. 子代选择器
		$('#box2>p').css('color','yellow');

	   // 3. 毗邻选择器 匹配所有紧接着选中元素的兄弟
	   $('#father+p').css('font-size','30px');

	   // 4. 兄弟选择器~
	   $('#father~p').css('background','blueviolet');

	   // 5. 获取第一个元素
	   $('li:first').css('font-size','50px');

	   // 6. 获取最后一个元素
	   $('li:last').css('font-size','50px');
	   
基本过滤选择器
	  // 1. 获取索引为奇数的
	  $('li:odd').css('color','red');
	  // 2. 获取索引为偶数的
	  $('li:even').css('color','yellow');
	  // 选中索引值为1的元素
	  $("li:eq(1)").css('font-size','100px');
	  // 大于索引值1
	  $("li:gt(1)").css('font-size','100px');
	  // 小于索引值1
	  $("li:lt(1)").css('font-size','13px');

属性选择器
    // 标签名[属性名]查找所有含有id属性的该标签名的元素
	  $("li[id]").css('color','red');
   // [attr=value] 匹配给定的属性是某个特定值的元素
	  $("li[class=what]").css('font-size','30px');
   // [attr!=value] 匹配所有不含有指定的属性或者不等于特定值的元素
	  $("li[class!=what]").css('color','darkgreen');
   // 匹配给定的属性是以某些值开始的元素
	  $("input[name^=username]").css('background','red');
   // 匹配给定的属性是以某些值结尾的元素
	  $("input[name$=123]").css('background','blue');
   // 匹配给定的属性包含某些值的元素
	  $("btn[class*=123]").css('background','blue');
	  
筛选选择器
   // 获取第n个元素 数值从0开始
	 $('span').eq(2).css('color','red');
   // 获取第一个元素
	 $('p').first().css('color','yellow');
   // 选取一个元素的父级元素
	 $('li').parent().css('width','300px');
   // .siblings()选择所有的熊德元素
	 $('div').siblings('li').css('color','red');
   // find()查找所有的后代元素
	 $('div').find('p').css('color','orange')

jquery的显示效果
    // hide() 和show() 方法
		 var isShow = true;
				$('#btn').click(function () {
					if(isShow){
						$('#box').show('slow',function () {
							alert(123); // 回调函数
							 $('#box').text('盒子出来了');
							isShow = false
						})
					}else {
						$('#box').hide(2000,function () {
							 $('#box').text('');
							 isShow = true
						});

					}

				})
	// toggle 开关 如果元素显示则隐藏，反之亦然
		  $('#btn').click(function () {
					$('#box').toggle(3000)
				})
	// slideDown 通过高度变化(向下增大) 来到动态显示所有匹配的元素，在显示完成后触发一个回调函数
	// SlideUP   通过高度变化(向上减小) 来动态隐藏所有匹配的元素, 在隐藏完成后可选地触发一个回调函数。
		  $(function () {

				$('#btn').hover(function () {
					$('#box').slideDown(2000);
				},function () {
					 $('#box').slideUp(2000);
				})
			})

	// fadeIn    通过不透明度的变化来实现所有匹配元素的淡入效果，并在动画完成后可选的触发一个回调函数。这个动画只调整元素的不透明度，也就是说所有匹配的元素的高度和宽度不会发生变化  
	// faddeOut  通过不透明度的变化来实现所有匹配元素的淡出效果
		   $(function () {
            $('#box').mouseover(function () {
                $('#box').fadeOut(2000);
            });

            $('#btn').mouseout(function () {
                // $('#box').fadeOut(2000);
                $('#box').fadeTo(2000,0.3)
            })
        })
	
    animimate  用于创建自定义动画函数
    语法：animate(params,[speed],[fn]
    参数：
		params：一组包含作为动画属性和终值的样式属性和及其值的集合
		speed：三种预定速度之一的字符串（"slow","normal",or"fast")或表示动画时长的毫秒数值(如：1000）
		fn:在动画完成时执行的函数，每个元素执行一次0
	
    stop  停止所有在指定元素上正在运行的动画
	语法：stop([clearQueue],[jumpToEnd])
	参数：	
	clearQueue: 如果设置成true，清空队列，可以立即结束动画
	gotoEnd: 让当前正在执行的动画立即完成，并且重设show和hide的原始样式
	
	delay  用来做延迟的操作
	语法: delay(1000)  一秒之后做后面的操作
	
jquery的属性操作
	jquery对象有它自己的属性和方法， 属性找找模块分为四个部分：html属性操作, dom属性操作, 类样式操作和值操作
	
    html属性操作：是对html文档中的属性进行读取，设置和移除操作。 如attr()  removeAttr()
	DOM属性操作: 对DOM元素的属性进行读取， 设置和移除操作。 如prop()  removeProp()
	类样式操作: 是指对DOM属性className进行添加 移除操作。 比如addClass()  removeClass()  toggleClass()
	值操作：是对DOM属性value进行读取和设置操作  如html() text()  val()
	
	attr 设置属性值或者返回被选元素的属性值
		// 获取值：attr()设置一个属性值的时候 只是获取值
		var id = $('div').attr('id')
		console.log(id)
		var cla = $('div').attr('class')
		console.log(cla)
		
		//设置值
		// 1 设置一个值 设置div的class为box
	
	removeAttr 从每一匹配的元素中删除一个属性
		 $('#box').removeAttr('name');
	
	prop 获取在匹配的元素集中的一个元素的属性值,它是对当前匹配到的dom对象设置属性。
		console.log($('li').prop('class'));// 获取的是第一个元素的className
        // 设置值
        $('li').first().prop('name','app');
        console.log( $('li').first());
		
	removProp用来删除由.prop方法设置的属性集
		     // 删除值
            $('li').first().removeProp('name');
            console.log( $('li').prop('name')); // undefined
			
	addClass 添加多个类名
		$('span').addClass('span2 span3');
		
	removeClass 移除全部类名或指定类名
		$('span').removeClass('span2');
		
	toggleClass 如果存在就删除一个类如果不存在就删除一个类
		$('span').click(function(){
			$(this).toggleClass('active')
		})
	
jQuery的文档操作

    一 插入操作
    	1 父元素.append(子元素)追加某元素 父元素中添加新的元素
		
			var oli = document.createElement('li')
			oli.innterHTML = '呵呵'
			
			// jquery中dom操作
			$('ul').append('<li>1233</li>')
			$('ul').append(oli)
			// 如果直接的内容是当前页面中的某些元素，那么这些元素将从原位置消失。简言之, 就是一个移动操作
			$('ul'.append($('#app'))
			
		2 子元素.appendTo(父元素)追加到某元素 子元素添加到父元素
			$('<a href="#">路飞2</a>').appendTo($('ul'));
			
		3 prepend前置添加, 添加到父元素的第一个位置
			$('ul').prepend($('<li>插到第一</li>'))
		
		4 prependTo 后置添加，第一个元素添加到父元素中
			$('<li>插到第0</li>').prependTo($('ul'))
		
		5 父元素.after(子元素)在匹配的元素之后插入内容与子元素.insertAfter(父元素)
			$('ul').after('<h4>我是一个h3标题</h4>')
			$('<h5>我是一个h2标题</h5>').insertAfter('ul')
		
		6 父元素.before(子元素)在匹配的元素之前插入内容与子元素.inserBefor(父元素)
			$('ul').before('<h3>我是一个h3标题</h3>')
			$('<h2>我是一个h2标题</h2>').insertBefore('ul')
			
	二 复制操作
		clone()克隆匹配的DOM元素并且选中这些克隆的副本
			
			$('button').click(function(){
				// 1 .clone():克隆匹配的DOM元素并且选中这些克隆的副本
				// 2 .clone(true): 元素以及其所有的时间处理并且选中这些克隆副本(简言之，副本具有与真身一样的事件处理能力)
				$(this).clone(trun).insertAfter(this);
			})
		
		
jQuery的CSS
	 // 1 获取匹配元素的相对父元素的偏移 position

            console.log($('p').position().left);
            console.log($('p').position().top);

            var offsetTop = $('p').position().top + 50;

            $('#btn').click(function () {
                $('p').animate({top:offsetTop},1000)
            });

            // 2 获取匹配元素 相对滚动条卷起的位置信息 scrollTop scrollLeft


            $(document).scroll(function () {
                console.log($(document).scrollLeft());
                console.log($(document).scrollTop());
            });

            // 3 获取匹配元素在当前视口的相对偏移 相对于浏览器

            console.log($('#box').offset());
            console.log($('p').offset().top);
            console.log($('p').offset().left);
            console.log($('#btn').offset().left);
            console.log($('#btn').offset().top);

            // 获取元素的宽高
            console.log("宽"+$('#box').width());
            console.log("高"+$('#box').height());

            // 设置宽高
            $('#box').width(400);

            // innerWidth /outerWidth

            // 获取 width + 2*padding 不包括边框   获取匹配元素的内部宽度
            console.log($('#box').innerWidth());  // 420

            // 获取 width + 2*padding 包括两个边框 获取匹配元素的外部宽度
            console.log($("#box").outerWidth());

jquery的筛选方式
    1   eq         获取第N个元素	                                               eq(index)         $("p").eq(1)
    2   first      获取第一个元素		                                           first()	         $('li').first()
    3   last       获取最后一个元素                                                last()            $('li').last()
    4   hasClass   检查当元素是否包含某个特定类如果有返回True                      hasClass(类名)    $('li').hassClass('lil')
	5   children   取得一个包含匹配的元素集合中每一个元素的所有子元素集合		   children()        $("div").children()
	6   parent     取得一个包含匹配元素的唯一父元素的元素集合 					   paraent()		 $("p").paraent()
	7   prev       取得一个包含匹配元素集合中每一个元素紧邻的前一个同辈元素集合    prev()			 $("p").prev()
	8   preAll	   查找当前元素之前所有的同辈远古三								   preAll()			 $("div:last").prevALL().addClass("before")
	9   siblings   筛选给定的同胞同类元素(不考虑给定元素本身)					   siblings(元素）   $('#leftBox li').eq(0).siblings('li').addClass('active')
	
jquery的事件
	事件的概念
	HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。
	想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念
	
	什么是事件流

		事件流描述的是从页面中接收事件的顺序
		1、DOM事件流
		“DOM2级事件”规定的事件流包括三个阶段：
		(1) 事件捕获阶段；
		(2) 处于目标阶段；
		(3) 事件冒泡阶段

		