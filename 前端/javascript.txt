一 javaScript是什么
javaScript是一种web前端的描述语言，也是一种基于对象（object）和事件驱动（Event Driven）的、安全性好的脚本语言。

javaScript的特点：
	javaScript主要用来向html页面中添加交互行为
	javaScript是一种脚本语言，语法和c语言系列语言的语法类似，属弱语言类型。
	javaScript一般用来编写客户端脚本，如node.js例外。
	javaScript是一种解释型语言，边执行边解释无需另外编译。


二 js中的变量
	变量的声明和定义
	    1 先声明后定义
	       var dog;
		   // alert(dog)   // undefined未定义
		   // 定义
		   dog = '小黄'    // 边浪复制
		2 声明立即定义
			var dog_2 = '小红';
			console.log(dog_2);
	变量命名规范
		1 严格区分大小写
		2 命名时名称可以出现字母、数字、下划线、$ ,但是不能数字开头，也不能纯数字，不能包含关键字和保留字。关键字：var number等
		3 推荐驼峰命名法：有多个有意义的单词组成名称的时候，第一个单词的首字母小写，其余的单词首字母写
		4 匈牙利命名：就是根据数据类型单词的的首字符作为前缀

三 js中的数据类型
	1 基本数据类型
	  (1) number
		var a = 123; 
		//typeof 检查当前变量是什么数据类型
		console.log(typeof a)
		// 特殊情况
		var a1 = 5/0;
		console.log(typeof a1) // infinity 无限大
	  (2) string
		var str = '123';
		console.log(typeof str)
	  
	  (3) boolean
		var b1 = false;
		console.log(typeof b1)
		
	  (4) null
		var c1 = null; //空对象 objec
		console.log(c1)
	  
	  (5) undefined
		var d1;
		// 表示变量
		
	2 引用数据类型
	   数组Array
			(1)数组的创建方式
				var colors = ['red','green','yellow']
				使用构造函数创建数组
				var colors2 = new Array()
			(2)数组的赋值
				var arr = [];
				arr[0] = 123;
				arr[1] = '哈哈’
			(3) 数组的常用方法
				concat()             将几个数组合并为一个数组
				join()	             返回字符串，其中包含了连接到一起数组中的所有元素，元素由指定分隔符分割开来
				pop()		         移除数组的最后一个元素
				shift()		         移除数组的一个元素
				unshift()	         移除数组的开头添加一个元素，并返回新的长度
				splice(star,end) 	 删除元素，并向数组添加新元素。
				sort()				 对数组的 元素进行排序
				slice()			     可从已有的数组中返回选定的元素。
				reverse()			 对数组进行反转
				length				 获取数组长度
				
		字符串String
			字符串常用方法
				charAt()			返回指定索引的位置字符
				concat()			返回字符串值，表示两个或多个字符串的拼接
				mantch()			返回正则表达式模式对字符串进行匹配到的结果
				replace(a,b)		字符串b替换成了a
				search(stringObj)   返回的第一个匹配结果的索引值
				slice(start,end)    返回start到end-1之间的字符串，索引从0开始
				substr(start,end)   字符串截取，左闭右开
				toUpperCase()		将字符串转成大写
				toLowerCase()		将字符串转成小写
				
		Date日期对象
			创建方法
				var myDate = new Date();
			常用方法
				getDate()				根据本地时间返回指定日期对象的月份中的几(1-31)
				Date()					根据本地时间返回当天的日期和时间
				getMonth()				根据本地时间返回指定日期对象的月份(0-11)
				getFullYear()			根据本地时间返回指定日期对象年份(四位数年份返回四位数字)
				getDay()				根据本地时间返回指定日期对象的星期中的第几天(0-6)\
				getHours()				根据本地时间返回指定日期对象的小时(0-23)
				getMinutes()			根据本地时间返回指定日期的对象分钟(0-59)
				getSeconds()			根据本地时间返回指定日期对象的秒数(0-59)
		Math对象
			常用方法
				Math.floor()			向下取整，称为地板函数
				Math.cel()				向上取整
				Math.max(a,b)			求a和b中的最大值
				Math.min(a,b)			求a和b中的最小值
				Manth.random()			随机数，默认0-1之间的随机数，公式min+Math.random()*(max-min),求min~max之间的数
				
		
四 定时器
	在js中的定时器分两种：1、setTimeout() 2、setInterval()
	 1.setTimeOut()
		只在指定时间后执行一次
		//定时器 异步运行  
		function hello(){  
		alert("hello");  
		}  
		//使用方法名字执行方法  
		var t1 = window.setTimeout(hello,1000);  
		var t2 = window.setTimeout("hello()",3000);//使用字符串执行方法  
		window.clearTimeout(t1);//去掉定时器
	2.setInterval()
		在指定时间为周期循环执行
		//实时刷新时间单位为毫秒  
		setInterval('refreshQuery()',8000);   
		/* 刷新查询 */  
		function refreshQuery(){  
		  console.log('每8秒调一次') 
		}
		两种方法根据不同的场景和业务需求择而取之，
		一般情况下setTimeout用于延迟执行某方法或功能，
		setInterval则一般用于刷新表单，对于一些表单的假实时指定时间刷新同步，动画效果等。

五 DOM操作
	在JS中，所有的事物都是节点，元素、文本等都是节点。
    应用场景：可以通过节点进行DOM对象的增删改查
	
	1 获取DOM节点的方法
		//通过id获取，唯一的
		var oDiv = document.getElementById('box');
		//通过类名获取
		var oDiv = document.getElementsByClassName('.box')[0];
		//通过标签名获取
		var oDiv = document.getElementsByTagName('div')[0];
		
	2 常用DOM节点
	
		childNodes				获取所有的子节点，除了元素还有文本等
		children				获取所有元素子节点，不包含文本
		parentNode				获取父节点
		previousSibling			获取上一个兄弟节点，包含文本
		previousElementSibling	获取上一个兄弟元素节点，不包含文本
		nextSibling				获取下一个兄弟节点，包含文本
		nextElementSibling		获取下一个兄弟元素节点，不包含文本
		firstChild				获取第一个子节点，包含文本
		firstElementChild		获取第一个子节点，不包含文本
		lastChild				获取最后一个子节点，包含文本
		lastElementChild		获取父元素最后一个元素节点。不包含文本
	
	3 节点的增删改查
	// 1.创建元素节点
		var oH2 = document.createElement('h2');
	// 设置oH2的内容，p标签会被解析成p元素显示到HTML页面中
		oH2.innerHTML = '<p>嘿 sariy</p>';
	// 只设置元素内的文本内容，div标签将被当做文本元素
		oH2.innerText = '<div>嘿嘿</div>'
	// 2.将创建好的元素节点添加到指定元素所有内容的后面
		oDiv.appendChild(oH2);
	// 获取元素节点里的所有内容 包括标签和文本
		console.log(oDiv.innerHTML);
	// 表示元素节点的标签名大写
		console.log(oDiv.tagName);
	// 只获取元素内的文本内容，html标签将被忽略
		console.log(oDiv.innerText);
	// 设置元素id
		oH2.id = 'luffy';
	// 设置类名
		oH2.className = 'wusir';
		oH2.className = 'wusir2';
	//获取标签属性
		console.log(oH2.getAttribute('class'));//wusir2
	// 设置标签属性
		oA.setAttribute('href','https://www.jd.com');
	// 删除元素上的属性
		oA.removeAttribute('href');
	// 删除创建的对象
	// oDiv.removeChild(oH2);
	//如果为true 克隆当前元素与元素的所有子节点
	// console.log(oDiv.cloneNode(true));
	// 父节点.replaceChild(新节点,子节点) 用新节点替换某个子节点
		var op = document.createElement('p');
		op.innerText = '我是一个段落';
		oDiv.replaceChild(op,oA);
	//style属性 ：css内联样式属性值
	//一般情况下， css的样式属性中出现“-” 号，则对应的style属性 是：去掉“-”号，把“-”号 后面单词的第一字母大写。 如果没有“-”号，则两者 一样。
	//例如:oDiv.css.backgroundColor = 'red';
	
