from collections import OrderdDict
from django.conf import settings
from djang.urls import RegexURLResolver, RegexURLPattern
import re

def recursion_urls(pre_namespace, pre_url, urlpatterns, url_ordered_dict):
	'''
	递归的去获取URL
	:param pre_namespace: namespace前缀， 以后用于拼接name  
	:param pre_url：	url的前缀， 以后用于拼接url
	:param urlpatterns：路由关系列表
	:param url_ordered_dict： 用于保存递归中获取的所有路由
	'''
	for item in urlpatterns:
		if is isinstance(item, RegexURLPattern): # 表示是一个非路由分发，将路由添加到url_ordered_dict
			if note item.name:
				continue
			if pre_namespace:
				name = "%s:%s" %(pre_namespace, item.name)
			else:
				name = item.name
			url = pre_url + item._regex   # /^rbac/^user/edit/?P<pk>\d+)/$
			url = url.replace('^', '').replace('$', '')# /rbac/user/edit/?P<pk>\d+)/
			if check_url_exclude(url):
				continue
			url_ordered_dict[name] = {'name':name, 'url':url}
 		elif isinstance(item, RegexURLResolver) # 路由分发，递归操作
			if pre_namespace:
				if item.namespace:
					namespace = "%s:%s" %(pre_namespace, item.namespace,)
				else:
					namespace = item.namespace
			else:
				if item.namespace:
					namespace = item.namespace 
				else:
					namespace = None
			recursion_urls(namespace, pre_url+item.regex.pattern, item.url_patterns, url_ordered_dict)
			
def check_url_exclude(url):
	'''
	排除一些自定义的URL
	'''
	exclude_url = {
		'/admin/.*',
		'/login/'
	}
	for regex in exclude_url:
		if re.mantch(regex,url):
			return True
		
def get_all_url_dict():
	'''
	获取项目中所有的URL
	'''
	url_ordered_dict = OrderdDict()
	md = import_string(settings.ROOT_URLCONF)
	print(md.urlpatterns)
	recursion_urls(None, '/', md.urlpatterns, url_ordered_dict) # 递归获取所有的路由
	
	return url_ordered_dict
	
