一 启动类
1 创建一个stark app 组件

2 编写ready方法
stark/apps.py

from django.apps import AppConfig
from djngo.utils.module_loading import autodiscover_modules

class StarkConfig(AppConfig)
	name = 'stark'
	def read(self)
		autodiscover_modules('stark')
	
	程序启动时,会先去每个app中找stark.py并加载
3 在其他app中创建stark.py

4 程序启动时便会自动加载 stark.py

二 生成stark类功能
stark.py
	class ModelStartk(object):
		# 要展示的字段
		list_display = ['__str__']
		list_display_links = []
		modelform_class = None
		search_filed = []
		actions = []
		list_filter = []
		
		def __init__(self,model,site):
			# 用户当前访问的模型表
			self.model = model
			self.site = site
			
		def edit(self, obj=None, header=False):
			if header:
				return "编辑"
			from django.utils.sagesting import mark_safe
			model_name = self.model._meta.model_name
			app_label = self.model._meta.app_label
			
			_url = reverse("%s_%s_change" %(app_label, model_name),args=(obj.pk,))
			return "mark_safe(<a href="%s">编辑</a>%_url)"
		
		def new_list_play(self):
			# 将 CheckBox 编辑以及删除添加到 list_display
			temp=[]
			temp.append(ModelStark.checkbox)
			temp.extend(self.list_display)
			if not self.list_display_links:
				temp.append(ModelStark.edit)
			temp.append(ModelStark.deletes)
			return temp
		
		def get_action_list(self):
			'''
			构建action列表
			'''
			temp = []
			for action in self.action:
				temp.append({
					"name": action.__name__,
					"desc": action.short_description
					}
				)
			# [{"name":"patch_init","desc":"批量初始化"}]
			return temp
		def get_modelform_class(self):
			'''
			先判断是否有自定制的modelForm
			'''
			if not self.modelform_class:
				from django.froms import ModelForm
				class ModelFormDemo(ModelForm):
					classs Meta:
						model = self.model
						fileds = "__all__"
				return ModelFormDemo
			else:
				return self.modelform_class
	
		
		def add(self, request):
			return HttpRespones("add")
		
		def delete(self, request, id)
			return HttpRespones("delete")
			
		def list_view(self, request)

			return HttpRespones("list_view")
			
		def deep_urls(self):
			return [],None,None
			
		def get_deep_urls(self)
			temp = []
			model_name = self.model._meta.model_name
			app_label = self.model._meta.app_label
			
			temp.append(re_path(r"^add",self.add, name="%s_%s_add" %(app_label,model_name))
			temp.append(re_path(r"^(\d+)/delete/", self.delete, name="%s_%s_delete" %(app_label,model_name)
			temp.append(re_path(r"^(\d+)/change/"， self.change, name="%s_%s_change" %(app_label,model_name)
			temp.append(re_path(r"^$", list_view, name="%s_%s_list" %(app_label,model_name))
			return temp
	
	class StarkSite(object)
		def __init__(self):
			self.registry={}
		
		# 注册功能
		def register(self,model,stark_class=None):
		
			if not stark_class:
				stark_class = ModelStartk
			# 键相当于表明, 值相当于表自定制类的实例对象
			self.registry[model] = stark_class(model, self)
		
	
		
		# 获取URL
		def get_urls(self):
			temp = []
			
			for model,stark_class_obj in self.registry.items():
				model_name = model._meta.model_name
				app_label = model._meta.app_label
				# 分发增删改查
				temp.append(re_path(r"^%s/%s/"%(app_label,model_name), stark_class_obj.deep_urls))
			return temp
			
		
		@property
		def urls(self):
			return self.get_urls,None,None
			

		
	site = StarkSite()

APP01/stark.py
	from .models import *
	class UserConfig(ModelStartk)
		pass
	
	site.register(UserInfo,UserConfig)
	site.register(Book)
	
三 设计URL

urls.py
	from stark.service.stark import site
	
	ulrpatterns = [
		re_path(site.urls)
	]
	
四 展示表

	class UserConfig(ModelStartk)
		
		def edit(self, obj):
			from django.utils.sagesting import mark_safe
			model_name = self.model._meta.model_name
			app_label = self.model._meta.app_label
			
			_url = reverse("%s_%s_change" %(app_label, model_name),args=(obj.pk,))
			return "mark_safe(<a href="%s">编辑</a>%_url)"
		
		list_display = ['name', 'age', edit]


	def list_view(self, request)
		'''
		构建数据结构
		[
			["harry",24],
			["sam",24]
		]
		'''
		
		
		data_list = self.model.objects.all()
		# 搜索功能
		from django.db.models import Q
		key_word = request.GET.get("q")
		search_connections = Q()
		if key_word:
			search_connections.connector = "or"
			for search_field in self.search_fileds:
				search_connections.children.append((search_filed+"__contains", key_word))
		data_list = self.model.objects.fliter(search_connections)
		
		# 获取filter构建Q对象
		filter_condition = Q()
		for filter_field,val in request.GET.items()
			filter_condition.children.append((filter_field,val))
		
		# 构建表头
		header_list = []
		for filed in self.new_list_play():
			if  callable(filed):
				val = filed(self, header=True)
			else:
				if filed == "__str__":
					header_list.append(self.model._meta.model_name.upper())
					val = self.model.get_field(field).verbose_name
					
			header_list.append(val)		
	
		
		# 构建数据
        data = []
        for obj in data_list:
            temp = []
            for filed in self.new_list_play():
                if callable(filed):
                    value = filed(self, obj)
                else:
					# 将多对多字段和多对一字段对象转为字符串
					field_obj = selc.config.model._meta.get_field(filed)
					if isinstance(field_obj,ManyToManyField):
						ret = getattr(obj,filed).all()
						t = []
						for mobj in ret"
							t.append(str(mobj))
						val=",".join(t)	
					else:
						if field_obj.choices:
							val = getattr(obj, "get_"+field+"_display"
                    val = getattr(obj, filed)
					if filed in self.list_display_links:
						value = mark_safe("<a>%s</a>" %value)
                temp.append(value)
            data.append(temp)
			

		
		
        return render(request, "lisv_view.html", {'data': data})

五 添加数据
	def add(self,reque t)
		# 拿到ModelForm的类并生成form对象
		ModelFormClass = self.get_modelform_class()
		from = ModelFormClass()
		
		for bfield in form:
			from django.forms.models import ModelChoiceField
			if isinstance(bfield.field,ModelChoiceField)
				bfield.is_pop = True
				# 一对多或者多对多字段的关联模型表
				print("====>", bfield.field.queryset.model)
				related_model_name=bfield.field.queryset.model._meta.model_name
				related_app_label=bfield.field.queryset.model._meta.app_label
				
				_url = reverse("%s_%s_add"%(related_app_label, related_model_name))
				bfield.url = _url+"?pop_res_id=id_%s" %bfield.name 
				
		if request.menthod == "POST":
			form = ModelFormClass(request.POST)
			if form.is_valid():
				obj = form.save()
				pop_res_id = request.GET.get("pop_res_id")
				
				if pop_res_id:
					res={"pk": obj.pk, "text":str(obj), "pop_res_id":pop_res_id }
					return render(request, "pop.html", {"res":jons.dump(res)})
				else:
					return  redirect(self.get_list_url())
		
		return render(request, "add_view.html", locals())
		
			
六 filter过滤
	
	class ShowList(object):
		
		def get_filter_linktags(self):
			link_dic = {}
			
			for filter_field in self.config.list_filter:
				params = copy.deepcopy(self.request.GET)
				cid = self.request.GET.get(filter_field,0)
				filter_field_obj = self.config.model._meta.get_field(filter_field)
				
				# 处理普通字段
				if isinstance(filter_field_obj, Foreignkey) or isinstance(filter_field_obj,ManyToManyField)
					data_list = filter_field_obj.rel.to.object.all()
				else:
					data_list = self.config.model.objects.all()
					
				temp = []
				
				# 处理全部标内容的标签
				if params.get(filter_field):
					del parms[filter_field]
					temp.apped("<a href="?%s/">全部内容</a>" %params.urlencode())
				else:
					temp.apped("<a href="/">全部内容</a>")
					
				# 处理数据的标签	
				for obj in data_list:
					if isinstance(filter_field_obj, Foreignkey) or isinstance(filter_field_obj,ManyToManyField)
						pk = obj.pk
						text=str(obj)
					else：
						pk = obj.get("pk")
						text = obj.get(filter_field)
					
						
					params[filter_field]=pk
					_url = params.urlencode()
					if cid == str(pk) or cid == text:
						link_tag = "<a class="active" href='?%s'>%s</a>"%(_url, text)
					else:
						link_tag = "<a href='?%s'>%s</a>"%(_url, str(obj))
					temp.append(link_tag)
				link_dic[filter_field] = temp
					
				
			return link_dic

七 POP功能
	
	
	
一年左右的Python Django WEB框架的开发经验.熟练Python后端开发以及Linux系统相关操作，热爱编程，有一点的自学能力，