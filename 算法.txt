一 算法基础

时间复杂度：
	时间复杂度是用来估计算法运行时间的一个式子(单位)
	一般来说，时间复杂度高的算法比复杂度低的算法慢
	常见的时间复杂度(按照率排序)
		注意:logn为数学中的对数
		o(1)<o(logn)<o(n)<o(nlogn)<o(n方)<o(n方logn)<o(n立方)
	快速一眼判断时间复杂度的方法(适用于绝大数简单情况)
		确定问题规模n
		循环减半的过程->O(logn)
		几次循环就是n的几次方的复杂度
空间复杂度：
	空间复杂度用来评估算法内存占用大小的式子
	空间复杂度的表示方式与时间复杂度完全一样
		算法使用了几个变量:O(1)
		算法使用了长度为n的一维列表：o(n-1)
		算法使用了m行n列的二维列表：o(mn)
汉诺塔
	n个盘子时：
	
	1 把n-1个圆盘从A经过C移动到B
	2 把第n个圆盘从A移动到C
	3 把n-1个小圆盘从B经过A移动到C
	
	def haoni(n, A, B, C):
		# n个盘子从A经过B移动到c
	    if n >0:
			haoni(n-1,A, C, B)
			print("%s->%s" %(A, C))
			print(n-1, B, A, C)
	
	haoni(3, "A", "B", "C")
	
二 2分查找法
	# 注意 二分查找的列表必须为有序列表
	def binary_search(li, val)
		'''
		传入一个列表先取出中间值， 如果val大于中间值则向右查找否则向左查找
			
		'''
		low = 0           
		high = len(1i) - 1
		while low <= high: # 候选区有值
			mid = (low + high) // 2  # 取中间值
			if li[mid] > val:
				high = mid - 1
			elif li[mid] < val:
				low = mid +1
			else:
				return mid
		else
			return None
			
	
	# 递归实现二分查找
	def binary_search_rec(data_set, value, low, high):
		if low <= high:
			mid = (low + high) // 2
			if data_set[mid] == value
				return mid
			elif data_set[mid] > value:
				return bin_search_rec(data_set, value, low, mid -1)
			else
				return binary_search_rec(data_set, value, mid + 1, high)
		else:
			return

三 排序之LOW B三人组
	# 冒泡
	def bubble_sort(data_list):
		'''
		首先, 列表每两个相邻的数如果前边的比后边的大， 那么交换这两个数
		算法复杂度O(n²)
		关键点:趟 无序区
		:param data_list:
		:return:
		'''
		for i in range(0, len(data_list) - 1):
			# i 表示第i趟 有序区有i个数
			for j in range(0, len(data_list)-i-1):
				if data_list[j] > data_list[j+1]:
					data_list[j], data_list[j+1] = data_list[j+1], data_list[j]


	# 冒泡改进
	def bubble_sort2(data_list):
		'''
		首先, 列表每两个相邻的数如果前边的比后边的大， 那么交换这两个数
		算法复杂度O(n²)
		关键点:趟 无序区
		:param data_list:
		:return:
		'''

		for i in range(0, len(data_list) - 1):
			# i 表示第i趟 有序区有i个数
			exchange = False
			for j in range(0, len(data_list)-i-1):
				if data_list[j] > data_list[j+1]:
					data_list[j], data_list[j+1] = data_list[j+1], data_list[j]
					exchange = True
			if not exchange:  # 如果在1趟没有进行交换证明已经排好序了 提前终止
				return


	# 选择排序
	def select_sort(li):
		for i in range(0, len(li) - 1):
			# 第i趟 有序区范围:[0:i] 无序区范围:[i:n]
			min_loc = i  # 最小数
			for j in range(i+1, len(li)):
				if li[min_loc] > li[j]:
					min_loc = j

			li[i], li[min_loc] = li[min_loc], li[i]


	# 插入排序
	'''
	推算过程 li = [10,5,7,9,8]
	第一趟：i = 1 j = 0 tmp = 5  条件满足j>=0  并且 li[j](10) > tmp(5) 进入循环 li[j+1](5) = li[j](10) j=-1 [5,10,7,9,8,3]
	第二趟：i = 2 j = 1 tmp = 7  条件满足j>=0  并且 li[j](10) > tmp(7) 进入循环 li[j+1](7) = li[j](10) j=0 [5,7,10,9,8,3] 
	第三趟: i = 3 j = 2 tmp = 9  条件满足j>=0  并且 li[j](10) > tmp(9) 进入循环 li[j+1](9) = li[j](10) j=1 [5,7,9,10,8,3]
	第四趟：i = 4 j = 3 tmp = 8  条件满足j>=0  并且 li[j](10) > tmp(8) 进入循环 li[j+1](8) = li[j](10) j=2 [5,7,9,8,10,3] 再次满足 条件满足j>=0  并且 li[j](9) > tmp(8) 进入循环 li[j+1](8) = li[j](9) j=1 [5,7,8,9,10]
	
	
	'''
	def insert_sort(li):
		for i in range(1, len(li)):
			# i即表示趟数，也表示摸到的牌的下标
			# j表示手里最后一张牌
			j = i - 1
			tmp = li[i]
			while j >= 0 and li[j] > tmp:
			  li[j+1] = li[j]
			  j -= 1
			li[j+1] = tmp
			
四 排序之NB三人组
	1 快速排序
	快排思路：
		* 取一个元素p(第一个元素),使元素p归位
		* 列表被p分成两部分,左边都比p小,右边都比p大
		* 递归完成排序
	时间复杂度：O(nlogn)
	快速排序的问题：
		* 最坏情况
		* 递归
	实现代码：
		def partition(li, left, right):
			tmp = li[left]
			while left < right:
				while left < right and li[right] >= tmp:  # 从右面寻找比tmp小的数
					right -= 1  # 指针往左走一步
				li[left] = li[right]  # 在right找到比tmp小的数，将这个数从right放到left
				print(li)
				while left < right and li[left] <= tmp:
					left += 1
				li[right] = li[left]  # 把左边的值写到右边的空位
				print(li)
			li[left] = tmp  # 把tmp位
			return left

		li = [5, 7, 4, 6, 3, 1, 2, 9, 8]
		print(li)
		partition(li, 0, len(li) - 1)
		print(li)
		'''
		[5, 7, 4, 6, 3, 1, 2, 9, 8]
		[2, 7, 4, 6, 3, 1, 2, 9, 8]
		[2, 7, 4, 6, 3, 1, 7, 9, 8]
		[2, 1, 4, 6, 3, 1, 7, 9, 8]
		[2, 1, 4, 6, 3, 6, 7, 9, 8]
		[2, 1, 4, 3, 3, 6, 7, 9, 8]
		[2, 1, 4, 3, 3, 6, 7, 9, 8]
		[2, 1, 4, 3, 5, 6, 7, 9, 8]
		'''
		def quick_sort(li, left, right):
			if left < right:  # 至少两个元素
				mid = partition(li, left, right)
				quick_sort(li, left, mid - 1)
				quick_sort(li, mid + 1, right)

		quick_sort(li,0, len(li)-1)
		print(li)
	
	2 堆排序
	(1) 二叉树
		* 度不超过2的树
		* 每个节点最多有两个孩子节点
		* 两个孩子节点被区分为左孩子节点和右孩子节点
		满二叉树：一个二叉树如果每一个层的节点数达到最大值,则这个二叉树就是满二叉树
		完全二叉树：叶节点只能出现在最下层和次下层，并且最下面一层的节点都集中在该层最左边的若干位置的二叉树
	(2) 什么是堆
		* 堆是一种特殊的完全二叉树结构
		* 大根堆：一颗完全二叉树, 满足任一节点都比其他孩子节点大
		* 小根堆：一颗完全二叉树, 满足任一节点都比其孩子节点小
	(3) 堆排序的实现过程
		* 建立堆
		* 得到堆顶元素，为最大元素
		* 去掉堆顶，将堆最后一个元素放到堆顶，此时可通过一次调整重新使堆有序。
		* 堆顶元素为第二大元素
		* 重复第三个步骤，直到堆变空
	(4) 堆排序实现代码
		def sift(li, low, high):
			"""
			:param li: 列表
			:param low: 堆的根节点位置
			:param high: 堆的最后一个元素的位置
			:return:
			"""
			i = low  # i最开始指向根节点
			j = 2 * i + 1  # j开始是左节点孩子
			tmp = li[low]  # 把堆顶存起来
			while j <= high:  # 只要j位置有数
				if j + 1 <= high and li[j + 1] > li[j]:  # 如果这个节点右孩子存在并且比左孩子大，将j指向右孩子节点
					j = j + 1  #
				if li[j] > tmp:
					li[i] = li[j]
					i = j  # 往下看一层
					j = 2 * i + 1
				else:  # tmp更大， 把tmp放到i的位置上
					break
			li[i] = tmp  # 把tmp放到某一级领导位置上


		def heap_sort(li):
			n = len(li)
			for i in range((n - 2) // 2, -1, -1):
				# i表示建堆的时候调整的部分的根的下标
				sift(li, i, n - 1)
			# 建堆完成
			for i in range(n - 1, -1, -1):
				# i指向当前堆的最后一个元素
				li[0], li[i] = li[i], li[0]
				sift(li, 0, i - 1)  # i-1是新的high（最后一个的位置）

	(5) 堆排序时间复杂度
		O(nlogn)
	
	(6) 堆排序模块
		import heapq
		import random

		li = list(range(100))
		random.shuffle(li)

		heapq.heapify(li)  # 建立堆
		heapq.heappop(li)  # 为此弹出一个最小数
		n = len(li)
		for i in range(n):
			print(heapq.heappop(li))
	
	(7) 堆排序———— topk问题
		现在又n个数，设计算法得到前K大的数。 (k<n)
		解决思路：
			第一种：排序号切片 		O(nlogn)
			第二种：使用冒泡排序	O(k)
			第三种：堆排序思路		O(nlogk)
		堆排序实现思路：
			* 取列表前k个元素建立一个小根堆。对顶就是目前第K大的数
			* 依次向后遍历原列表,对于列表中的元素,如果小于堆顶则忽略该元素;如果大于堆顶，则将堆顶更换为该元素并且对堆进行一次调整
			* 遍历列表所有元素后, 倒序弹出堆顶
				
	3 归并排序
		(1) 什么是归并
			假设现在的列表分两段有序,如何将其合成为一个有序列表
			[2,5,7,8,9|1,3,4,6]
			归并实现过程：
			def merge(li, low, mid, high):
				i = low
				j = mid + 1
				ltmp = []
				while i <= mid and j <= high:  # 只要左右两边都有数
					if li[i] < li[j]:
						ltmp.append(li[i])
						i += 1
					else:
						ltmp.append(li[j])
						j += 1
				# while执行完肯定有一部分没数了
				while i <= mid:
					ltmp.append(li[i])
					i += 1
				while j <= high:
					ltmp.append(li[j])
					j += 1
				li[low:high + 1] = ltmp
		(2) 归并排序的实现
			分解：将列表约分越小,直到分成一个元素
			终止条件： 一个元素是有序的
			合并： 将两个有序列表归并，列表越来越大
			def merge_sort(li, low, high):
				if low < high:  # 至少有两个元素，递归
					mid = (low + high) // 2
					merge_sort(li, low, mid)
					merge_sort(li, mid+1, high)
					merge(li, low, mid, high)
		(3) 时间复杂度
			o(nlogn)
		
	4 NB三人组总结
		(1) 三种排序算法的时间复杂度都是O(nlogn)
		(2) 一般情况下,就运行时间而言： 快速排序<归并排序<堆排序
		(3) 三种排序算法的缺点：
			*快速排序：极端情况下排序效率低
			*归并排序：需要额外的内存开销
			*堆排序： 在快的排序算法中相对较慢

五 其他排序
	1 希尔排序
		希尔排序是一种插入排序算法 过程如下：
			* 首先取一个整数d1=n/2，将元素分为d1个组，每组相邻量元素之间距离为d1，在各组内进行直接插入排序
			* 取第二个整数d2=d1/2，重复上述分组排序过程，直到di=1，即所有元素在同一组内进行直接插入排序。
			* 希尔排序每趟并不使某些元素有序，而是使整体数据越来越接近有序；最后一趟排序使得所有数据有序。
		实现代码：
			def insert_sort_gap(li, gap):
				for i in range(gap, len(li)):
					tmp = li[i]
					j = i - gap
					while j >= 0 and li[j] >tmp:
						li[j+gap] = li[j]
						j -= gap
					li[j+gap] = tmp

			def shell_sort(li):
				d = len(li) // 2 # 长度除以2
				while d >= 1:
					insert_sort_gap(li, d)
					d //= 2
	
	2 计数排序
		对列表进行排序, 已知列表的范围都在0到100之间，设计时间复杂度为O(n)的算法
		def count_sort(li, max_count=100):
			count = [0 for _ in range(max_count+1)]
			for val in li:
				count[val] += 1
			li.clear()
			for index, val in enumerate(count):
				for i in range(val):
					li.append(index)

		import random
		li = [random.randint(0, 100) for _ in range(1000)]
		print(li)
		count_sort(li)
		print(li)
	
	3 桶排序
		def bucket_sort(li, n=100, max_num=10000):
			buckets = [[] for _ in range(n)] # 创建n个桶
			for var in li:
				i = min(var // (max_num // n), n-1) # i 表示var放到几号桶里
				buckets[i].append(var) # 把var加到桶里边
				# 保持桶内的顺序
				for j in range(len(buckets[i])-1, 0, - 1):
					if buckets[i][j] < buckets[i][j-1]:
						buckets[i][j], buckets[i][j-1] = buckets[i][j-1], buckets[i][j]
					else:
						break
			sorted_li = []
			for buc in buckets:
				sorted_li.extend(buc)

			return sorted_li

		import random
		li = [random.randint(0, 10000) for i in range(10000)]
		print(li)
		li = bucket_sort(li)
		print(li)
		
	4 基数排序
		多关键字排序：假如现在有一个员工表，要求按照薪资排序，年龄相同的员工按照年龄排序。
			* 先按照年龄进行排序, 在安装薪资简写稳定排序
			* 对 32,13,94,52,17,54,93排序,是否可以看做多关键字排序?
			
		代码：
			def radix_sort(li):
				max_num = max(li)  # 最大值 例如： 99->2, 888->3, 10000->5
				it = 0
				while 10 ** it <= max_num:
					buckets = [[] for _ in range(10)]
					for val in li:
						# 取位数 列：987 it=1 987//10-98  98%10->8; it=2 987//100->9  9%10=9
						digit = (val // 10 ** it) % 10
						buckets[digit].append(val)
					li.clear()
					# 把数重新写回li
					for buc in buckets:
						li.extend(buc)

					it += 1
			import random
			li = list(range(10000))
			random.shuffle(li)
			radix_sort(li)
			print(li)
		基数排序效率：
			时间复杂度： O(kn)
			空间复杂度： O(k+n)
			K表示数字位数

六 常用算法题目
	1 给定两个字符串s和t，判断t是否为s的重新排列后组成的单词
		s = "anagram", t = "nagaram", return True
		s = "rat", t = "car", return False
		
	2 给定一个m*n的二维列表, 查找一个数是否存在。列表有下列特性
		[[1,3,5,7],[10,11,16,20], [23,30,34,5]]
		* 每一行的列表从左到右已经排序好。
		* 每一行第一个数比上一行最后一个数大
		
		def serachMatrix(mtrix, target):
			h = len(matrix)
			if h == 0:
				return False
			w = len(matrix[0])
			if w ==0:
				return False
			left = 0 
			right = w * h -1
			while low <= high: # 候选区有值
				mid = (left + right) // 2  # 取中间值
				i = mid // w
				j = mid % w
				if matrix[i][j] > target:
					high = mid - 1
				elif matrix[i][j] < target:
					low = mid +1
				else:
					return True
			else
				return False
			
		
	3 给定一个列表和一个整数，设计算法找到两个数的下标，使两个数之和为给定的整数。保证肯定仅有一个结果
	例如 列表[1,2,5,6]与目标整数3， 1+2=3，结果为(0,1)
	
		def twoSum(self, nums, target):
			new_nums = [[nums, i] for i, num in enumerate(nums)]
			new_nums.sort(key=lambda x:x[0])
			for i in range(len(new_nums)):
				a = new_nums[i][0]
				b = target - a
				if b >= a:
					j = binary_search(new_nums, i+1, len(nums)-1, b)
				else:
					j = binary_search(new_nums,0,i-1,b)
				if j:
					break
			return sorted(new_nums[i][1], new_nums[j][1])